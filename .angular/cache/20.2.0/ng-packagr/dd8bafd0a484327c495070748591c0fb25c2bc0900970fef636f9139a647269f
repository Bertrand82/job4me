{"hash":"6ab1c4815044090ae52d8854644ddc142eac25af421610b2d3495d4ae061ba5e","types":[{"exports":["BgAuthService","BgBackFunctions","BgNavigationAuthStripe","StripeCustomer","StripeInvoice","StripeSession"],"facadeModuleId":"C:\\Users\\bertr\\workspace_angular\\bgOffreEmploiRepondeur\\dist\\bg-navigation-auth-stripe\\tmp-typings\\bg-navigation-auth-stripe.d.ts","isDynamicEntry":false,"isEntry":true,"isImplicitEntry":false,"moduleIds":["C:/Users/bertr/workspace_angular/bgOffreEmploiRepondeur/dist/bg-navigation-auth-stripe/tmp-typings/lib/bg-auth-service.d.ts","C:/Users/bertr/workspace_angular/bgOffreEmploiRepondeur/dist/bg-navigation-auth-stripe/tmp-typings/lib/bg-navigation-auth-stripe.d.ts","C:/Users/bertr/workspace_angular/bgOffreEmploiRepondeur/dist/bg-navigation-auth-stripe/tmp-typings/lib/bg-back-functions.d.ts","C:\\Users\\bertr\\workspace_angular\\bgOffreEmploiRepondeur\\dist\\bg-navigation-auth-stripe\\tmp-typings\\bg-navigation-auth-stripe.d.ts"],"name":"bg-navigation-auth-stripe.d","type":"chunk","dynamicImports":[],"fileName":"index.d.ts","implicitlyLoadedBefore":[],"importedBindings":{"@firebase/auth":["*"],"@angular/core":["*"],"@angular/common/http":["HttpClient"],"@angular/fire/auth":["Auth","User"],"@angular/material/dialog":["MatDialog"]},"imports":["@firebase/auth","@angular/core","@angular/common/http","@angular/fire/auth","@angular/material/dialog"],"modules":{"C:/Users/bertr/workspace_angular/bgOffreEmploiRepondeur/dist/bg-navigation-auth-stripe/tmp-typings/lib/bg-auth-service.d.ts":{"code":"declare class BgAuthService {\n    auth: Auth;\n    private http;\n    private userSignal;\n    baseUrl0: string;\n    stripeCustomer: StripeCustomer | null;\n    stripeSession: StripeSession | null;\n    constructor(auth: Auth, http: HttpClient);\n    get currentUser(): i0.Signal<User | null>;\n    register(email: string, password: string): Promise<_firebase_auth.UserCredential>;\n    login(email: string, password: string): Promise<_firebase_auth.UserCredential>;\n    logout(): Promise<void>;\n    sendPasswordResetEmail2(email: string): Promise<void>;\n    loginWithGoogle(): void;\n    createOrSearchStripeCustomer(email: string | null): void;\n    getEmail(): string | null | undefined;\n    searchStripeCustomerOrCreate(aCallBack?: (stripeCustomerId: string) => void): void;\n    fetchStripeSessionsByBgUserId2(stripeCustomerId: string): void;\n    saveStripeCustomerInLocal(): void;\n    getStripeCustomerFromLocal(): StripeCustomer | null;\n    saveStripeSessionInLocal(): void;\n    getStripeSessionFromLocal(): StripeSession | null;\n    isUserAbonnementActif(): boolean;\n    static ɵfac: i0.ɵɵFactoryDeclaration<BgAuthService, never>;\n    static ɵprov: i0.ɵɵInjectableDeclaration<BgAuthService>;\n}\ntype StripeCustomer = {\n    address: {\n        city: string | null;\n        country: string | null;\n        line1: string | null;\n        line2: string | null;\n        postal_code: string | null;\n        state?: string | null;\n    };\n    balance: number;\n    created: number;\n    currency: string;\n    default_source: string | null;\n    delinquent: boolean;\n    description: string | null;\n    discount: any | null;\n    email: string | null;\n    id: string;\n    invoice_prefix: string;\n    invoice_settings: {\n        custom_fields: any | null;\n        default_payment_method: string | null;\n        footer: string | null;\n        rendering_options: any | null;\n    };\n    livemode: boolean;\n    metadata: Record<string, any>;\n    name: string | null;\n    object: string;\n    phone: string | null;\n    preferred_locales: string[];\n    shipping: any | null;\n    tax_exempt: string;\n    test_clock: any | null;\n};\ninterface StripeInvoice {\n    id: string;\n    object: string;\n    account_country: string;\n    account_name: string;\n    account_tax_ids: string[] | null;\n    amount_due: number;\n    amount_overpaid: number;\n    amount_paid: number;\n    amount_remaining: number;\n    amount_shipping: number;\n    application: string | null;\n    attempt_count: number;\n    attempted: boolean;\n    auto_advance: boolean;\n    automatic_tax: {\n        disabled_reason: string | null;\n        enabled: boolean;\n        liability: string | null;\n        provider: string | null;\n        status: string | null;\n    };\n    automatically_finalizes_at: number | null;\n    billing_reason: string;\n    collection_method: string;\n    created: number;\n    currency: string;\n    custom_fields: any | null;\n    customer: string;\n    customer_address: any | null;\n    customer_email: string | null;\n    customer_name: string | null;\n    customer_phone: string | null;\n    customer_shipping: any | null;\n    customer_tax_exempt: string;\n    customer_tax_ids: any[];\n    default_payment_method: string | null;\n    default_source: string | null;\n    default_tax_rates: any[];\n    description: string | null;\n    discounts: any[];\n    due_date: number | null;\n    effective_at: number;\n    ending_balance: number;\n    footer: string | null;\n    from_invoice: any | null;\n    hosted_invoice_url: string | null;\n    invoice_pdf: string | null;\n    issuer: {\n        type: string;\n    };\n    last_finalization_error: any | null;\n    latest_revision: any | null;\n    lines: {\n        object: string;\n        data: Array<{\n            id: string;\n            object: string;\n            amount: number;\n            currency: string;\n            description: string;\n            discount_amounts: any[];\n            discountable: boolean;\n            discounts: any[];\n            invoice: string;\n            livemode: boolean;\n            metadata: Record<string, any>;\n            parent: {\n                invoice_item_details: any | null;\n                subscription_item_details?: {\n                    invoice_item: string | null;\n                    proration: boolean;\n                    proration_details: {\n                        credited_items: any | null;\n                    };\n                    subscription: string;\n                    subscription_item: string;\n                };\n                type: string;\n            };\n            period: {\n                end: number;\n                start: number;\n            };\n            pretax_credit_amounts: any[];\n            pricing: {\n                price_details?: {\n                    price: string;\n                    product: string;\n                };\n                type: string;\n                unit_amount_decimal: string;\n            };\n            quantity: number;\n            taxes: any[];\n        }>;\n        has_more: boolean;\n        total_count: number;\n        url: string;\n    };\n    livemode: boolean;\n    metadata: Record<string, any>;\n    next_payment_attempt: number | null;\n    number: string;\n    on_behalf_of: string | null;\n    parent: {\n        quote_details: any | null;\n        subscription_details?: {\n            metadata: Record<string, any>;\n            subscription: string;\n        };\n        type: string;\n    };\n    payment_settings: {\n        default_mandate: string | null;\n        payment_method_options: {\n            acss_debit: any | null;\n            bancontact: any | null;\n            card?: {\n                request_three_d_secure: string;\n            };\n            customer_balance: any | null;\n            konbini: any | null;\n            sepa_debit: any | null;\n            us_bank_account: any | null;\n        };\n        payment_method_types: string[] | null;\n    };\n    period_end: number;\n    period_start: number;\n    post_payment_credit_notes_amount: number;\n    pre_payment_credit_notes_amount: number;\n    receipt_number: string | null;\n    rendering: any | null;\n    shipping_cost: any | null;\n    shipping_details: any | null;\n    starting_balance: number;\n    statement_descriptor: string | null;\n    status: string;\n    status_transitions: {\n        finalized_at: number | null;\n        marked_uncollectible_at: number | null;\n        paid_at: number | null;\n        voided_at: number | null;\n    };\n    subtotal: number;\n    subtotal_excluding_tax: number;\n    test_clock: any | null;\n    total: number;\n    total_discount_amounts: any[];\n    total_excluding_tax: number;\n    total_pretax_credit_amounts: any[];\n    total_taxes: any[];\n    webhooks_delivered_at: number | null;\n}\ninterface StripeSession {\n    id: string;\n    object: string;\n    adaptive_pricing: {\n        enabled: boolean;\n    };\n    after_expiration: any | null;\n    allow_promotion_codes: boolean | null;\n    amount_subtotal: number;\n    amount_total: number;\n    automatic_tax: {\n        enabled: boolean;\n        liability: any | null;\n        provider: any | null;\n        status: any | null;\n    };\n    billing_address_collection: any | null;\n    branding_settings: {\n        background_color: string;\n        border_style: string;\n        button_color: string;\n        display_name: string;\n        font_family: string;\n        icon: string | null;\n        logo: string | null;\n    };\n    cancel_url: string;\n    client_reference_id: string | null;\n    client_secret: string | null;\n    collected_information: {\n        business_name: string | null;\n        individual_name: string | null;\n        shipping_details: any | null;\n    };\n    consent: any | null;\n    consent_collection: any | null;\n    created: number;\n    currency: string;\n    currency_conversion: any | null;\n    custom_fields: any[];\n    custom_text: {\n        after_submit: string | null;\n        shipping_address: string | null;\n        submit: string | null;\n        terms_of_service_acceptance: string | null;\n    };\n    customer: string;\n    customer_creation: string | null;\n    customer_details: {\n        address: {\n            city: string | null;\n            country: string | null;\n            line1: string | null;\n            line2: string | null;\n            postal_code: string | null;\n            state: string | null;\n        };\n        business_name: string | null;\n        email: string | null;\n        individual_name: string | null;\n        name: string | null;\n        phone: string | null;\n        tax_ids: any[];\n    };\n    customer_email: string | null;\n    discounts: any[];\n    expires_at: number;\n    invoice: string | null;\n    invoice_creation: {\n        enabled: boolean;\n        invoice_data: {\n            account_tax_ids: string[] | null;\n            custom_fields: any | null;\n            description: string | null;\n            footer: string | null;\n            issuer: any | null;\n            metadata: Record<string, any>;\n            rendering_options: any | null;\n        };\n    };\n    livemode: boolean;\n    locale: string | null;\n    metadata: {\n        [key: string]: string;\n    };\n    mode: string;\n    origin_context: any | null;\n    payment_intent: string | null;\n    payment_link: string | null;\n    payment_method_collection: string;\n    payment_method_configuration_details: {\n        id: string;\n        parent: string | null;\n    };\n    payment_method_options: {\n        card: {\n            request_three_d_secure: string;\n        };\n    };\n    payment_method_types: string[];\n    payment_status: string;\n    permissions: any | null;\n    phone_number_collection: {\n        enabled: boolean;\n    };\n    recovered_from: any | null;\n    saved_payment_method_options: {\n        allow_redisplay_filters: string[];\n        payment_method_remove: string;\n        payment_method_save: string | null;\n    };\n    setup_intent: string | null;\n    shipping_address_collection: any | null;\n    shipping_cost: any | null;\n    shipping_options: any[];\n    status: string;\n    submit_type: string | null;\n    subscription: string | null;\n    success_url: string;\n    total_details: {\n        amount_discount: number;\n        amount_shipping: number;\n        amount_tax: number;\n    };\n    ui_mode: string;\n    url: string | null;\n    wallet_options: any | null;\n}","originalLength":10453,"removedExports":[],"renderedExports":["BgAuthService","StripeCustomer","StripeInvoice","StripeSession"],"renderedLength":10246},"C:/Users/bertr/workspace_angular/bgOffreEmploiRepondeur/dist/bg-navigation-auth-stripe/tmp-typings/lib/bg-navigation-auth-stripe.d.ts":{"code":"declare class BgNavigationAuthStripe {\n    auth: BgAuthService;\n    private dialog;\n    constructor(auth: BgAuthService, dialog: MatDialog);\n    onSettings(): void;\n    onConnectionRequest(): void;\n    static ɵfac: i0.ɵɵFactoryDeclaration<BgNavigationAuthStripe, never>;\n    static ɵcmp: i0.ɵɵComponentDeclaration<BgNavigationAuthStripe, \"lib-bg-navigation-auth-stripe\", never, {}, {}, never, never, true, never>;\n}","originalLength":565,"removedExports":[],"renderedExports":["BgNavigationAuthStripe"],"renderedLength":415},"C:/Users/bertr/workspace_angular/bgOffreEmploiRepondeur/dist/bg-navigation-auth-stripe/tmp-typings/lib/bg-back-functions.d.ts":{"code":"/**\n * Service providing backend function URLs and versioning.\n * Pour lancer l'emulateur local: >bg build && firebase emulators:start --only functions\n * Pour déployer les fonctions: > bg build && firebase deploy --only functions\n *\n */\ndeclare class BgBackFunctions {\n    getUrlHost(): string;\n    getVerion(): string;\n    static ɵfac: i0.ɵɵFactoryDeclaration<BgBackFunctions, never>;\n    static ɵprov: i0.ɵɵInjectableDeclaration<BgBackFunctions>;\n}","originalLength":496,"removedExports":[],"renderedExports":["BgBackFunctions"],"renderedLength":451},"C:\\Users\\bertr\\workspace_angular\\bgOffreEmploiRepondeur\\dist\\bg-navigation-auth-stripe\\tmp-typings\\bg-navigation-auth-stripe.d.ts":{"code":null,"originalLength":130,"removedExports":[],"renderedExports":[],"renderedLength":0}},"referencedFiles":[],"code":"import * as _firebase_auth from '@firebase/auth';\nimport * as i0 from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Auth, User } from '@angular/fire/auth';\nimport { MatDialog } from '@angular/material/dialog';\n\ndeclare class BgAuthService {\n    auth: Auth;\n    private http;\n    private userSignal;\n    baseUrl0: string;\n    stripeCustomer: StripeCustomer | null;\n    stripeSession: StripeSession | null;\n    constructor(auth: Auth, http: HttpClient);\n    get currentUser(): i0.Signal<User | null>;\n    register(email: string, password: string): Promise<_firebase_auth.UserCredential>;\n    login(email: string, password: string): Promise<_firebase_auth.UserCredential>;\n    logout(): Promise<void>;\n    sendPasswordResetEmail2(email: string): Promise<void>;\n    loginWithGoogle(): void;\n    createOrSearchStripeCustomer(email: string | null): void;\n    getEmail(): string | null | undefined;\n    searchStripeCustomerOrCreate(aCallBack?: (stripeCustomerId: string) => void): void;\n    fetchStripeSessionsByBgUserId2(stripeCustomerId: string): void;\n    saveStripeCustomerInLocal(): void;\n    getStripeCustomerFromLocal(): StripeCustomer | null;\n    saveStripeSessionInLocal(): void;\n    getStripeSessionFromLocal(): StripeSession | null;\n    isUserAbonnementActif(): boolean;\n    static ɵfac: i0.ɵɵFactoryDeclaration<BgAuthService, never>;\n    static ɵprov: i0.ɵɵInjectableDeclaration<BgAuthService>;\n}\ntype StripeCustomer = {\n    address: {\n        city: string | null;\n        country: string | null;\n        line1: string | null;\n        line2: string | null;\n        postal_code: string | null;\n        state?: string | null;\n    };\n    balance: number;\n    created: number;\n    currency: string;\n    default_source: string | null;\n    delinquent: boolean;\n    description: string | null;\n    discount: any | null;\n    email: string | null;\n    id: string;\n    invoice_prefix: string;\n    invoice_settings: {\n        custom_fields: any | null;\n        default_payment_method: string | null;\n        footer: string | null;\n        rendering_options: any | null;\n    };\n    livemode: boolean;\n    metadata: Record<string, any>;\n    name: string | null;\n    object: string;\n    phone: string | null;\n    preferred_locales: string[];\n    shipping: any | null;\n    tax_exempt: string;\n    test_clock: any | null;\n};\ninterface StripeInvoice {\n    id: string;\n    object: string;\n    account_country: string;\n    account_name: string;\n    account_tax_ids: string[] | null;\n    amount_due: number;\n    amount_overpaid: number;\n    amount_paid: number;\n    amount_remaining: number;\n    amount_shipping: number;\n    application: string | null;\n    attempt_count: number;\n    attempted: boolean;\n    auto_advance: boolean;\n    automatic_tax: {\n        disabled_reason: string | null;\n        enabled: boolean;\n        liability: string | null;\n        provider: string | null;\n        status: string | null;\n    };\n    automatically_finalizes_at: number | null;\n    billing_reason: string;\n    collection_method: string;\n    created: number;\n    currency: string;\n    custom_fields: any | null;\n    customer: string;\n    customer_address: any | null;\n    customer_email: string | null;\n    customer_name: string | null;\n    customer_phone: string | null;\n    customer_shipping: any | null;\n    customer_tax_exempt: string;\n    customer_tax_ids: any[];\n    default_payment_method: string | null;\n    default_source: string | null;\n    default_tax_rates: any[];\n    description: string | null;\n    discounts: any[];\n    due_date: number | null;\n    effective_at: number;\n    ending_balance: number;\n    footer: string | null;\n    from_invoice: any | null;\n    hosted_invoice_url: string | null;\n    invoice_pdf: string | null;\n    issuer: {\n        type: string;\n    };\n    last_finalization_error: any | null;\n    latest_revision: any | null;\n    lines: {\n        object: string;\n        data: Array<{\n            id: string;\n            object: string;\n            amount: number;\n            currency: string;\n            description: string;\n            discount_amounts: any[];\n            discountable: boolean;\n            discounts: any[];\n            invoice: string;\n            livemode: boolean;\n            metadata: Record<string, any>;\n            parent: {\n                invoice_item_details: any | null;\n                subscription_item_details?: {\n                    invoice_item: string | null;\n                    proration: boolean;\n                    proration_details: {\n                        credited_items: any | null;\n                    };\n                    subscription: string;\n                    subscription_item: string;\n                };\n                type: string;\n            };\n            period: {\n                end: number;\n                start: number;\n            };\n            pretax_credit_amounts: any[];\n            pricing: {\n                price_details?: {\n                    price: string;\n                    product: string;\n                };\n                type: string;\n                unit_amount_decimal: string;\n            };\n            quantity: number;\n            taxes: any[];\n        }>;\n        has_more: boolean;\n        total_count: number;\n        url: string;\n    };\n    livemode: boolean;\n    metadata: Record<string, any>;\n    next_payment_attempt: number | null;\n    number: string;\n    on_behalf_of: string | null;\n    parent: {\n        quote_details: any | null;\n        subscription_details?: {\n            metadata: Record<string, any>;\n            subscription: string;\n        };\n        type: string;\n    };\n    payment_settings: {\n        default_mandate: string | null;\n        payment_method_options: {\n            acss_debit: any | null;\n            bancontact: any | null;\n            card?: {\n                request_three_d_secure: string;\n            };\n            customer_balance: any | null;\n            konbini: any | null;\n            sepa_debit: any | null;\n            us_bank_account: any | null;\n        };\n        payment_method_types: string[] | null;\n    };\n    period_end: number;\n    period_start: number;\n    post_payment_credit_notes_amount: number;\n    pre_payment_credit_notes_amount: number;\n    receipt_number: string | null;\n    rendering: any | null;\n    shipping_cost: any | null;\n    shipping_details: any | null;\n    starting_balance: number;\n    statement_descriptor: string | null;\n    status: string;\n    status_transitions: {\n        finalized_at: number | null;\n        marked_uncollectible_at: number | null;\n        paid_at: number | null;\n        voided_at: number | null;\n    };\n    subtotal: number;\n    subtotal_excluding_tax: number;\n    test_clock: any | null;\n    total: number;\n    total_discount_amounts: any[];\n    total_excluding_tax: number;\n    total_pretax_credit_amounts: any[];\n    total_taxes: any[];\n    webhooks_delivered_at: number | null;\n}\ninterface StripeSession {\n    id: string;\n    object: string;\n    adaptive_pricing: {\n        enabled: boolean;\n    };\n    after_expiration: any | null;\n    allow_promotion_codes: boolean | null;\n    amount_subtotal: number;\n    amount_total: number;\n    automatic_tax: {\n        enabled: boolean;\n        liability: any | null;\n        provider: any | null;\n        status: any | null;\n    };\n    billing_address_collection: any | null;\n    branding_settings: {\n        background_color: string;\n        border_style: string;\n        button_color: string;\n        display_name: string;\n        font_family: string;\n        icon: string | null;\n        logo: string | null;\n    };\n    cancel_url: string;\n    client_reference_id: string | null;\n    client_secret: string | null;\n    collected_information: {\n        business_name: string | null;\n        individual_name: string | null;\n        shipping_details: any | null;\n    };\n    consent: any | null;\n    consent_collection: any | null;\n    created: number;\n    currency: string;\n    currency_conversion: any | null;\n    custom_fields: any[];\n    custom_text: {\n        after_submit: string | null;\n        shipping_address: string | null;\n        submit: string | null;\n        terms_of_service_acceptance: string | null;\n    };\n    customer: string;\n    customer_creation: string | null;\n    customer_details: {\n        address: {\n            city: string | null;\n            country: string | null;\n            line1: string | null;\n            line2: string | null;\n            postal_code: string | null;\n            state: string | null;\n        };\n        business_name: string | null;\n        email: string | null;\n        individual_name: string | null;\n        name: string | null;\n        phone: string | null;\n        tax_ids: any[];\n    };\n    customer_email: string | null;\n    discounts: any[];\n    expires_at: number;\n    invoice: string | null;\n    invoice_creation: {\n        enabled: boolean;\n        invoice_data: {\n            account_tax_ids: string[] | null;\n            custom_fields: any | null;\n            description: string | null;\n            footer: string | null;\n            issuer: any | null;\n            metadata: Record<string, any>;\n            rendering_options: any | null;\n        };\n    };\n    livemode: boolean;\n    locale: string | null;\n    metadata: {\n        [key: string]: string;\n    };\n    mode: string;\n    origin_context: any | null;\n    payment_intent: string | null;\n    payment_link: string | null;\n    payment_method_collection: string;\n    payment_method_configuration_details: {\n        id: string;\n        parent: string | null;\n    };\n    payment_method_options: {\n        card: {\n            request_three_d_secure: string;\n        };\n    };\n    payment_method_types: string[];\n    payment_status: string;\n    permissions: any | null;\n    phone_number_collection: {\n        enabled: boolean;\n    };\n    recovered_from: any | null;\n    saved_payment_method_options: {\n        allow_redisplay_filters: string[];\n        payment_method_remove: string;\n        payment_method_save: string | null;\n    };\n    setup_intent: string | null;\n    shipping_address_collection: any | null;\n    shipping_cost: any | null;\n    shipping_options: any[];\n    status: string;\n    submit_type: string | null;\n    subscription: string | null;\n    success_url: string;\n    total_details: {\n        amount_discount: number;\n        amount_shipping: number;\n        amount_tax: number;\n    };\n    ui_mode: string;\n    url: string | null;\n    wallet_options: any | null;\n}\n\ndeclare class BgNavigationAuthStripe {\n    auth: BgAuthService;\n    private dialog;\n    constructor(auth: BgAuthService, dialog: MatDialog);\n    onSettings(): void;\n    onConnectionRequest(): void;\n    static ɵfac: i0.ɵɵFactoryDeclaration<BgNavigationAuthStripe, never>;\n    static ɵcmp: i0.ɵɵComponentDeclaration<BgNavigationAuthStripe, \"lib-bg-navigation-auth-stripe\", never, {}, {}, never, never, true, never>;\n}\n\n/**\n * Service providing backend function URLs and versioning.\n * Pour lancer l'emulateur local: >bg build && firebase emulators:start --only functions\n * Pour déployer les fonctions: > bg build && firebase deploy --only functions\n *\n */\ndeclare class BgBackFunctions {\n    getUrlHost(): string;\n    getVerion(): string;\n    static ɵfac: i0.ɵɵFactoryDeclaration<BgBackFunctions, never>;\n    static ɵprov: i0.ɵɵInjectableDeclaration<BgBackFunctions>;\n}\n\nexport { BgAuthService, BgBackFunctions, BgNavigationAuthStripe };\nexport type { StripeCustomer, StripeInvoice, StripeSession };\n","map":null,"preliminaryFileName":"index.d.ts","sourcemapFileName":null}],"fesm2022":[{"exports":["BgAuthService","BgBackFunctions","BgNavigationAuthStripe"],"facadeModuleId":"C:\\Users\\bertr\\workspace_angular\\bgOffreEmploiRepondeur\\dist\\bg-navigation-auth-stripe\\tmp-esm2022\\bg-navigation-auth-stripe.js","isDynamicEntry":false,"isEntry":true,"isImplicitEntry":false,"moduleIds":["C:/Users/bertr/workspace_angular/bgOffreEmploiRepondeur/dist/bg-navigation-auth-stripe/tmp-esm2022/lib/bg-auth-service.js","C:/Users/bertr/workspace_angular/bgOffreEmploiRepondeur/dist/bg-navigation-auth-stripe/tmp-esm2022/lib/component-connexion-modale/component-connexion-modale.js","C:/Users/bertr/workspace_angular/bgOffreEmploiRepondeur/dist/bg-navigation-auth-stripe/tmp-esm2022/lib/bg-back-functions.js","C:/Users/bertr/workspace_angular/bgOffreEmploiRepondeur/dist/bg-navigation-auth-stripe/tmp-esm2022/lib/component-settings-modale/component-settings-modale.js","C:/Users/bertr/workspace_angular/bgOffreEmploiRepondeur/dist/bg-navigation-auth-stripe/tmp-esm2022/lib/bg-navigation-auth-stripe.js","C:/Users/bertr/workspace_angular/bgOffreEmploiRepondeur/dist/bg-navigation-auth-stripe/tmp-esm2022/public-api.js","C:\\Users\\bertr\\workspace_angular\\bgOffreEmploiRepondeur\\dist\\bg-navigation-auth-stripe\\tmp-esm2022\\bg-navigation-auth-stripe.js"],"name":"bg-navigation-auth-stripe","type":"chunk","dynamicImports":[],"fileName":"bg-navigation-auth-stripe.mjs","implicitlyLoadedBefore":[],"importedBindings":{"@angular/core":["signal","*","Injectable","Inject","Component"],"@angular/material/dialog":["*","MAT_DIALOG_DATA"],"@angular/common":["CommonModule","*"],"@angular/forms":["FormsModule","*"],"@angular/fire/auth":["onAuthStateChanged","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","sendPasswordResetEmail","GoogleAuthProvider","signInWithPopup","*"],"@angular/common/http":["*"]},"imports":["@angular/core","@angular/material/dialog","@angular/common","@angular/forms","@angular/fire/auth","@angular/common/http"],"modules":{"C:/Users/bertr/workspace_angular/bgOffreEmploiRepondeur/dist/bg-navigation-auth-stripe/tmp-esm2022/lib/bg-auth-service.js":{"code":"class BgAuthService {\n    auth;\n    http;\n    userSignal = signal(null, ...(ngDevMode ? [{ debugName: \"userSignal\" }] : []));\n    baseUrl0 = 'https://europe-west1-job4you-78ed0.cloudfunctions.net/';\n    stripeCustomer;\n    stripeSession;\n    constructor(auth, http) {\n        this.auth = auth;\n        this.http = http;\n        onAuthStateChanged(this.auth, (user) => {\n            this.userSignal.set(user);\n        });\n        this.stripeCustomer = this.getStripeCustomerFromLocal();\n        this.stripeSession = this.getStripeSessionFromLocal();\n    }\n    get currentUser() {\n        return this.userSignal.asReadonly();\n    }\n    register(email, password) {\n        return createUserWithEmailAndPassword(this.auth, email, password);\n    }\n    login(email, password) {\n        console.log('login Tentative de connexion avec email :', email);\n        return signInWithEmailAndPassword(this.auth, email, password);\n    }\n    logout() {\n        this.stripeCustomer = null;\n        this.stripeSession = null;\n        this.saveStripeCustomerInLocal();\n        this.saveStripeSessionInLocal;\n        return signOut(this.auth);\n    }\n    sendPasswordResetEmail2(email) {\n        return sendPasswordResetEmail(this.auth, email);\n    }\n    loginWithGoogle() {\n        const provider = new GoogleAuthProvider();\n        signInWithPopup(this.auth, provider)\n            .then((result) => {\n            // L'utilisateur est connecté\n            const user = result.user;\n            console.log('Connecté :', user.email);\n            this.createOrSearchStripeCustomer(user.email);\n        })\n            .catch((error) => {\n            console.error('loginWithGoogle Erreur lors de la connexion :', error);\n            window.alert(error.message);\n        });\n    }\n    createOrSearchStripeCustomer(email) {\n        console.log('Recherche ou création du client Stripe pour email :', email);\n        if (!email)\n            return;\n        this.searchStripeCustomerOrCreate();\n    }\n    getEmail() {\n        if (this.currentUser() !== null) {\n            return this.currentUser()?.email;\n        }\n        else {\n            return 'No name';\n        }\n    }\n    searchStripeCustomerOrCreate(aCallBack) {\n        const baseUrl = `${this.baseUrl0}/bgstripesearchclientsbybguseridorcreateclient2`;\n        const params = new URLSearchParams({\n            email: this.getEmail() ?? '',\n        });\n        this.http.get(`${baseUrl}?${params.toString()}`, {}).subscribe({\n            next: (res) => {\n                console.log('BG Response from bgstripesearchclientsbybguseridorcreateclient:', res);\n                this.stripeCustomer = res;\n                this.saveStripeCustomerInLocal();\n                const stripeCustomerId = this.stripeCustomer?.id;\n                if (aCallBack) {\n                    console.log('BG aCallBack :', aCallBack);\n                    console.log('BG aCallBack getStripeCustomerId :', this.stripeCustomer?.id);\n                    if (stripeCustomerId) {\n                        aCallBack(stripeCustomerId);\n                    }\n                    else {\n                        console.error('BG Erreur: pas de stripeCustomerId après création ou recherche du client');\n                    }\n                }\n                else {\n                    console.log('BG pas de aCallBack fourni');\n                    if (stripeCustomerId) {\n                        this.fetchStripeSessionsByBgUserId2(stripeCustomerId); // Call fetchStripeSessionsByBgUserId2 directly\n                    }\n                }\n            },\n            error: (err) => {\n                console.error('Erreur from bgstripesearchclientsbybguseridorcreateclient:', err);\n            },\n        });\n    }\n    fetchStripeSessionsByBgUserId2(stripeCustomerId) {\n        console.log('searchStripeSessionsByBgUserId2 called with:', stripeCustomerId);\n        const baseUrl = `${this.baseUrl0}/bgstripegetsessionsbyclient2`;\n        const params = new URLSearchParams({\n            clientIdStripe: stripeCustomerId,\n        });\n        this.http.get(`${baseUrl}?${params.toString()}`, {}).subscribe({\n            next: (res) => {\n                console.log('Response from bgstripegetsessionsbyclient2:', res);\n                const listSessions = res.data;\n                console.log('listSessions:', listSessions);\n                if (listSessions.length > 0) {\n                    console.log('Sessions Stripe trouvées pour ce client.');\n                    for (const session of listSessions) {\n                        const invoiceId = session.invoice;\n                        console.log('invoiceId :', invoiceId);\n                        console.log('subscription:', session.subscription);\n                        console.log('mode:', session.mode);\n                        this.stripeSession = session;\n                        this.saveStripeSessionInLocal;\n                        if (invoiceId) {\n                            console.log('invoiceId found:', invoiceId);\n                            // Vous pouvez ajouter un traitement supplémentaire ici si nécessaire\n                        }\n                        else {\n                            console.log('No invoiceId found.');\n                        }\n                        console.log('Session ID:', session.id, ' - Amount Total:', session.amount_total, ' - Payment Status:', session.payment_status);\n                    }\n                }\n            },\n            error: (err) => {\n                console.error('Erreur from bgstripegetsessionsbyclient2:', err);\n            },\n        });\n    }\n    saveStripeCustomerInLocal() {\n        localStorage.setItem('stripeCustomer', JSON.stringify(this.stripeCustomer));\n    }\n    getStripeCustomerFromLocal() {\n        const stripeCustomer = localStorage.getItem('stripeCustomer');\n        return stripeCustomer ? JSON.parse(stripeCustomer) : null;\n    }\n    saveStripeSessionInLocal() {\n        localStorage.setItem('stripeSession', JSON.stringify(this.stripeSession));\n    }\n    getStripeSessionFromLocal() {\n        const stripeSession = localStorage.getItem('stripeSession');\n        return stripeSession ? JSON.parse(stripeSession) : null;\n    }\n    isUserAbonnementActif() {\n        return false;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0\", ngImport: i0, type: BgAuthService, deps: [{ token: i1.Auth }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.2.0\", ngImport: i0, type: BgAuthService, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0\", ngImport: i0, type: BgAuthService, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i1.Auth }, { type: i2.HttpClient }] });\nfunction isAbonnementActif(stripeSession) {\n    if (!stripeSession) {\n        return false;\n    }\n    // Consider the session active if it reports status 'complete' or if it hasn't expired yet.\n    const now = Math.floor(Date.now() / 1000);\n    if (stripeSession.status === 'complete') {\n        if (typeof stripeSession.expires_at === 'number' && stripeSession.expires_at > now) {\n            return true;\n        }\n    }\n    return false;\n}","originalLength":7731,"removedExports":[],"renderedExports":["BgAuthService"],"renderedLength":7317},"C:/Users/bertr/workspace_angular/bgOffreEmploiRepondeur/dist/bg-navigation-auth-stripe/tmp-esm2022/lib/component-connexion-modale/component-connexion-modale.js":{"code":"class ComponentConnexionModale {\n    dialogRef;\n    auth;\n    data;\n    email = '';\n    password = '';\n    constructor(dialogRef, auth, data) {\n        this.dialogRef = dialogRef;\n        this.auth = auth;\n        this.data = data;\n    }\n    onLogin() {\n        console.log('A Tentative de connexion avec email :', this.email);\n        console.log('B Tentative de connexion avec auth :', this.auth);\n        this.auth.login(this.email, this.password).then(() => {\n            // Login réussi, on appelle Stripe\n            this.auth.createOrSearchStripeCustomer(this.email);\n            this.onClose();\n        })\n            .catch((err) => {\n            console.log('C Erreur Auth err:', err);\n            window.alert(err.message);\n        });\n        this.onClose();\n    }\n    onRegister() {\n        this.auth.register(this.email, this.password)\n            .then(() => {\n            this.auth.createOrSearchStripeCustomer(this.email);\n            this.onClose();\n        })\n            .catch((err) => {\n            console.log('C Erreur Auth err:', err);\n            window.alert(err.message);\n        });\n        this.onClose();\n    }\n    onPasswordReset() {\n        console.log('A Tentative de reset password avec email :', this.email);\n        const obj = this.auth\n            .sendPasswordResetEmail2(this.email)\n            .catch((err) => {\n            console.log('C Erreur Auth err:', err);\n            window.alert(err.message);\n        });\n        console.log('B Objet de reset password:', obj);\n        obj.then((res) => {\n            console.log('D Réponse de reset password: res', res);\n            console.log('E mail de reset password: ', this.email);\n            window.alert('Email de réinitialisation envoyé à ' + this.email);\n        });\n        this.onClose();\n    }\n    onNoClick() {\n        this.dialogRef.close();\n    }\n    onClose() {\n        this.dialogRef.close();\n    }\n    onLoginWithGoogle() {\n        this.auth.loginWithGoogle();\n        this.onClose();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0\", ngImport: i0, type: ComponentConnexionModale, deps: [{ token: i1$1.MatDialogRef }, { token: BgAuthService }, { token: MAT_DIALOG_DATA }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.2.0\", type: ComponentConnexionModale, isStandalone: true, selector: \"app-component-connexion-modale\", ngImport: i0, template: \"\\r\\n<div style=\\\" margin: 20px;\\\">\\r\\n<form class=\\\"login-form\\\">\\r\\n  <div class=\\\"form-group\\\">\\r\\n    <input [(ngModel)]=\\\"email\\\" name=\\\"email\\\" placeholder=\\\"Email\\\" />\\r\\n  </div>\\r\\n  <div class=\\\"form-group\\\">\\r\\n    <input [(ngModel)]=\\\"password\\\" name=\\\"password\\\" type=\\\"password\\\" placeholder=\\\"Password\\\"/>\\r\\n  </div>\\r\\n  <div class=\\\"button-group\\\">\\r\\n    <button (click)=\\\"onLogin()\\\" type=\\\"submit\\\">Se connecter</button>\\r\\n    <button (click)=\\\"onPasswordReset()\\\" type=\\\"button\\\">Mot de passe oubli\\u00E9</button>\\r\\n\\r\\n  </div>\\r\\n  <div class=\\\"button-group\\\">\\r\\n    <button (click)=\\\"onLoginWithGoogle()\\\" type=\\\"submit\\\">Login with Google</button>\\r\\n  </div>\\r\\n  <div class=\\\"button-group\\\">\\r\\n\\r\\n    <button (click)=\\\"onRegister()\\\" type=\\\"submit\\\">Register</button>\\r\\n  </div>\\r\\n</form>\\r\\n\\r\\n<div style=\\\"text-align: right; margin-top: 20px;margin-right:5;\\\">\\r\\n  <button mat-button (click)=\\\"onClose()\\\">Fermer</button>\\r\\n</div>\\r\\n</div>\\r\\n\\r\\n\\r\\n\", styles: [\"\"], dependencies: [{ kind: \"ngmodule\", type: CommonModule }, { kind: \"ngmodule\", type: FormsModule }, { kind: \"directive\", type: i3.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { kind: \"directive\", type: i3.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i3.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i3.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { kind: \"directive\", type: i3.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { kind: \"directive\", type: i3.NgForm, selector: \"form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]\", inputs: [\"ngFormOptions\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0\", ngImport: i0, type: ComponentConnexionModale, decorators: [{\n            type: Component,\n            args: [{ selector: 'app-component-connexion-modale', imports: [CommonModule, FormsModule], template: \"\\r\\n<div style=\\\" margin: 20px;\\\">\\r\\n<form class=\\\"login-form\\\">\\r\\n  <div class=\\\"form-group\\\">\\r\\n    <input [(ngModel)]=\\\"email\\\" name=\\\"email\\\" placeholder=\\\"Email\\\" />\\r\\n  </div>\\r\\n  <div class=\\\"form-group\\\">\\r\\n    <input [(ngModel)]=\\\"password\\\" name=\\\"password\\\" type=\\\"password\\\" placeholder=\\\"Password\\\"/>\\r\\n  </div>\\r\\n  <div class=\\\"button-group\\\">\\r\\n    <button (click)=\\\"onLogin()\\\" type=\\\"submit\\\">Se connecter</button>\\r\\n    <button (click)=\\\"onPasswordReset()\\\" type=\\\"button\\\">Mot de passe oubli\\u00E9</button>\\r\\n\\r\\n  </div>\\r\\n  <div class=\\\"button-group\\\">\\r\\n    <button (click)=\\\"onLoginWithGoogle()\\\" type=\\\"submit\\\">Login with Google</button>\\r\\n  </div>\\r\\n  <div class=\\\"button-group\\\">\\r\\n\\r\\n    <button (click)=\\\"onRegister()\\\" type=\\\"submit\\\">Register</button>\\r\\n  </div>\\r\\n</form>\\r\\n\\r\\n<div style=\\\"text-align: right; margin-top: 20px;margin-right:5;\\\">\\r\\n  <button mat-button (click)=\\\"onClose()\\\">Fermer</button>\\r\\n</div>\\r\\n</div>\\r\\n\\r\\n\\r\\n\" }]\n        }], ctorParameters: () => [{ type: i1$1.MatDialogRef }, { type: BgAuthService }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_DIALOG_DATA]\n                }] }] });","originalLength":6541,"removedExports":[],"renderedExports":["ComponentConnexionModale"],"renderedLength":6107},"C:/Users/bertr/workspace_angular/bgOffreEmploiRepondeur/dist/bg-navigation-auth-stripe/tmp-esm2022/lib/bg-back-functions.js":{"code":"/**\n * Service providing backend function URLs and versioning.\n * Pour lancer l'emulateur local: >bg build && firebase emulators:start --only functions\n * Pour déployer les fonctions: > bg build && firebase deploy --only functions\n *\n */\nclass BgBackFunctions {\n    getUrlHost() {\n        if ((window.location.hostname === '127.0.0.1') || (window.location.hostname === 'localhost')) {\n            return 'http://127.0.0.1:5001/job4you-78ed0/europe-west1';\n        }\n        return 'https://europe-west1-job4you-78ed0.cloudfunctions.net';\n    }\n    getVerion() {\n        return '2';\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0\", ngImport: i0, type: BgBackFunctions, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.2.0\", ngImport: i0, type: BgBackFunctions, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0\", ngImport: i0, type: BgBackFunctions, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }] });","originalLength":1289,"removedExports":[],"renderedExports":["BgBackFunctions"],"renderedLength":1155},"C:/Users/bertr/workspace_angular/bgOffreEmploiRepondeur/dist/bg-navigation-auth-stripe/tmp-esm2022/lib/component-settings-modale/component-settings-modale.js":{"code":"class ComponentSettingsModale {\n    dialogRef;\n    bgAuth;\n    http;\n    changeDetectorRef;\n    bgBackFunctions;\n    email = '';\n    stripeIdClient = 'No StripeIdClien';\n    stripeIdSession = 'No IdSession';\n    priceIdStripeOneTime = {\n        id: 'price_1SBWfpI256EUPY44i7gmazbu',\n        mode: 'payment',\n    };\n    priceIdStripeAbonnement = {\n        id: 'price_1SC2ZiI256EUPY44UFeNCj8x',\n        mode: 'subscription',\n    };\n    constructor(dialogRef, bgAuth, http, changeDetectorRef, bgBackFunctions) {\n        this.dialogRef = dialogRef;\n        this.bgAuth = bgAuth;\n        this.http = http;\n        this.changeDetectorRef = changeDetectorRef;\n        this.bgBackFunctions = bgBackFunctions;\n        console.log('ComponentSettingsModale constructor bgAuth :', this.bgAuth);\n    }\n    isAbonnementActif() {\n        return this.bgAuth.isUserAbonnementActif();\n    }\n    ngOnInit() {\n        this.email = this.bgAuth.currentUser()?.email || '';\n        this.stripeIdClient = this.bgAuth.stripeCustomer?.id || 'No StripeIdClient';\n        this.stripeIdSession = this.bgAuth.stripeSession?.id || 'No IdSession';\n        this.bgAuth.baseUrl0 = this.bgBackFunctions.getUrlHost();\n    }\n    onLogout() {\n        console.log('B Tentative de logout avec auth :', this.bgAuth);\n        this.bgAuth.logout();\n        this.onClose();\n    }\n    onNoClick() {\n        this.dialogRef.close();\n    }\n    onClose() {\n        this.dialogRef.close();\n    }\n    abonnement() {\n        console.log('abonnement request');\n        this.getStripePaymentLink();\n    }\n    getStripeCustomerId() {\n        return this.bgAuth.stripeCustomer?.id;\n    }\n    getStripePaymentLink() {\n        if (this.getStripeCustomerId()) {\n            this.getStripePaymentLink2();\n        }\n        else {\n            console.log('Aucun client Stripe rencontré pour cet utilisateur.');\n            this.bgAuth.searchStripeCustomerOrCreate(this.getStripePaymentLink2.bind(this));\n        }\n    }\n    getStripePaymentLink2() {\n        const priceIdStripe = this.priceIdStripeAbonnement;\n        console.log('getStripePaymentLink pour le priceIdStripe :', priceIdStripe);\n        const currentHost = window.location.origin;\n        if (!priceIdStripe?.id || !priceIdStripe?.mode || !this.getStripeCustomerId() || !this.bgAuth.getEmail()) {\n            console.error('Paramètre manquant pour Stripe ! email :', this.bgAuth.getEmail());\n            console.error('Paramètre manquant pour Stripe ! priceIdStripe :', priceIdStripe);\n            console.error('Paramètre manquant pour Stripe ! stripeCustomerId :', this.getStripeCustomerId());\n            return;\n        }\n        const params = new URLSearchParams({\n            email: this.bgAuth.getEmail() ?? '',\n            priceIdStripe: priceIdStripe.id,\n            mode: priceIdStripe.mode,\n            clientIdStripe: this.getStripeCustomerId() ?? '',\n            succesUrl: `${currentHost}/merci`,\n            cancelUrl: `${currentHost}/cancelStripe`,\n        });\n        console.log('Appel de la fonction cloud bgstripegetpaymentlink avec :', params.toString());\n        const url0 = `${this.bgAuth.baseUrl0}/bgstripegetpaymentlink2?${params.toString()}`;\n        console.log('URL complète:', url0);\n        this.http.get(url0, {}).subscribe({\n            next: (res) => {\n                console.log('Response from bgstripegetpaymentlink:', res);\n                const url = res.url;\n                console.log('url:', url);\n                // window.open(url, '_self');\n                if (url) {\n                    window.location.href = url;\n                }\n                else {\n                    console.error('Pas de lien de paiement reçu de Stripe !');\n                    if (res.error) {\n                        const message = res.error.message;\n                        console.error('Message d\\'erreur Stripe:', message);\n                        console.error('Erreur Stripe:', res.error);\n                    }\n                }\n            },\n            error: (err) => {\n                console.error('Erreur from bgstripegetpaymentlink:', err);\n            },\n        });\n    }\n    desabonnement() {\n        console.log('desabonnement request');\n        const stripeCustomerId = this.getStripeCustomerId();\n        if (!stripeCustomerId) {\n            console.log('Aucun client Stripe rencontré pour cet utilisateur.');\n            this.bgAuth.searchStripeCustomerOrCreate(this.resilierAbonnement2.bind(this));\n        }\n        else {\n            this.resilierAbonnement2(stripeCustomerId);\n        }\n    }\n    resilierAbonnement2(stripeCustomerId) {\n        console.log('resilierAbonnement2 pour le stripeCustomerId :', stripeCustomerId);\n        this.http\n            .post(`${this.bgAuth.baseUrl0}/bgstripegetsession2`, {\n            clientId: stripeCustomerId,\n            urlRetour: window.location.origin + \"/moncomptebg\"\n        })\n            .subscribe({\n            next: (res) => {\n                console.log('Response from bgstripesubscriptionresilience2:', res);\n                const url = res.url;\n                console.log('url:', url);\n                if (url) {\n                    window.location.href = url;\n                }\n            },\n            error: (err) => {\n                console.error('Erreur from bgstripesubscriptionresilience2:', err);\n            },\n        });\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0\", ngImport: i0, type: ComponentSettingsModale, deps: [{ token: i1$1.MatDialogRef }, { token: BgAuthService }, { token: i2.HttpClient }, { token: i0.ChangeDetectorRef }, { token: BgBackFunctions }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.2.0\", type: ComponentSettingsModale, isStandalone: true, selector: \"app-component-connexion-modale\", ngImport: i0, template: \"\\r\\n<div style=\\\" margin: 20px;\\\">\\r\\n<form class=\\\"login-form\\\">\\r\\n  <div class=\\\"form-group\\\">\\r\\n    {{ email }}\\r\\n  </div>\\r\\n<div class=\\\"form-group\\\">\\r\\n   Id Client: {{ stripeIdClient }}\\r\\n</div>\\r\\n\\r\\n<div class=\\\"form-group\\\">\\r\\n   Id Session: {{ stripeIdSession }}\\r\\n</div>\\r\\n\\r\\n  <div class=\\\"button-group\\\">\\r\\n    <button (click)=\\\"onLogout()\\\" type=\\\"submit\\\">Se deconnecter</button>\\r\\n  </div>\\r\\n\\r\\n<div *ngIf=\\\"isAbonnementActif(); else notAbonned\\\" style=\\\"border: 1px solid black;\\\">\\r\\n  <div class=\\\"button-group\\\">\\r\\n  <button (click)=\\\"desabonnement()\\\" type=\\\"submit\\\" >\\r\\n     Desabonnement\\r\\n  </button>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<ng-template #notAbonned>\\r\\n  <div class=\\\"button-group\\\">\\r\\n  <button (click)=\\\"abonnement()\\\" type=\\\"submit\\\">\\r\\n    Abonnement\\r\\n  </button>\\r\\n  </div>\\r\\n</ng-template>\\r\\n</form>\\r\\n\\r\\n<div style=\\\"text-align: right; margin-top: 20px;margin-right:5;\\\">\\r\\n  <button mat-button (click)=\\\"onClose()\\\">Fermer</button>\\r\\n</div>\\r\\n</div>\\r\\n\\r\\n\\r\\n\", styles: [\"\"], dependencies: [{ kind: \"ngmodule\", type: CommonModule }, { kind: \"directive\", type: i5.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"ngmodule\", type: FormsModule }, { kind: \"directive\", type: i3.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { kind: \"directive\", type: i3.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { kind: \"directive\", type: i3.NgForm, selector: \"form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]\", inputs: [\"ngFormOptions\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0\", ngImport: i0, type: ComponentSettingsModale, decorators: [{\n            type: Component,\n            args: [{ selector: 'app-component-connexion-modale', imports: [CommonModule, FormsModule], template: \"\\r\\n<div style=\\\" margin: 20px;\\\">\\r\\n<form class=\\\"login-form\\\">\\r\\n  <div class=\\\"form-group\\\">\\r\\n    {{ email }}\\r\\n  </div>\\r\\n<div class=\\\"form-group\\\">\\r\\n   Id Client: {{ stripeIdClient }}\\r\\n</div>\\r\\n\\r\\n<div class=\\\"form-group\\\">\\r\\n   Id Session: {{ stripeIdSession }}\\r\\n</div>\\r\\n\\r\\n  <div class=\\\"button-group\\\">\\r\\n    <button (click)=\\\"onLogout()\\\" type=\\\"submit\\\">Se deconnecter</button>\\r\\n  </div>\\r\\n\\r\\n<div *ngIf=\\\"isAbonnementActif(); else notAbonned\\\" style=\\\"border: 1px solid black;\\\">\\r\\n  <div class=\\\"button-group\\\">\\r\\n  <button (click)=\\\"desabonnement()\\\" type=\\\"submit\\\" >\\r\\n     Desabonnement\\r\\n  </button>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<ng-template #notAbonned>\\r\\n  <div class=\\\"button-group\\\">\\r\\n  <button (click)=\\\"abonnement()\\\" type=\\\"submit\\\">\\r\\n    Abonnement\\r\\n  </button>\\r\\n  </div>\\r\\n</ng-template>\\r\\n</form>\\r\\n\\r\\n<div style=\\\"text-align: right; margin-top: 20px;margin-right:5;\\\">\\r\\n  <button mat-button (click)=\\\"onClose()\\\">Fermer</button>\\r\\n</div>\\r\\n</div>\\r\\n\\r\\n\\r\\n\" }]\n        }], ctorParameters: () => [{ type: i1$1.MatDialogRef }, { type: BgAuthService }, { type: i2.HttpClient }, { type: i0.ChangeDetectorRef }, { type: BgBackFunctions }] });","originalLength":9555,"removedExports":[],"renderedExports":["ComponentSettingsModale"],"renderedLength":9057},"C:/Users/bertr/workspace_angular/bgOffreEmploiRepondeur/dist/bg-navigation-auth-stripe/tmp-esm2022/lib/bg-navigation-auth-stripe.js":{"code":"class BgNavigationAuthStripe {\n    auth;\n    dialog;\n    constructor(auth, dialog) {\n        this.auth = auth;\n        this.dialog = dialog;\n    }\n    onSettings() {\n        console.log('Ouverture des paramètres utilisateur');\n        this.dialog.open(ComponentSettingsModale, {\n            data: 'bbb',\n        });\n    }\n    onConnectionRequest() {\n        console.log('Tentative de connexion  :');\n        this.dialog.open(ComponentConnexionModale, {\n            data: 'aaa',\n        });\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0\", ngImport: i0, type: BgNavigationAuthStripe, deps: [{ token: BgAuthService }, { token: i1$1.MatDialog }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.2.0\", type: BgNavigationAuthStripe, isStandalone: true, selector: \"lib-bg-navigation-auth-stripe\", ngImport: i0, template: \"<span *ngIf=\\\"auth.currentUser() as user; else notConnected\\\" style=\\\"border: 1px solid black;\\\">\\r\\n  Connect\\u00E9 en tant que {{ user?.email }}\\r\\n  <button (click)=\\\"onSettings()\\\" class=\\\"nav-btn\\\">\\r\\n   <i class=\\\"fas fa-cog\\\"></i>\\r\\n</button>\\r\\n</span>\\r\\n\\r\\n<ng-template #notConnected>\\r\\n  <button (click)=\\\"onConnectionRequest()\\\" class=\\\"nav-btn primary\\\">\\r\\n    <i class=\\\"fa-regular fa-user\\\"></i> Connexion\\r\\n  </button>\\r\\n</ng-template>\\r\\n\", styles: [\"\"], dependencies: [{ kind: \"ngmodule\", type: CommonModule }, { kind: \"directive\", type: i5.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0\", ngImport: i0, type: BgNavigationAuthStripe, decorators: [{\n            type: Component,\n            args: [{ selector: 'lib-bg-navigation-auth-stripe', imports: [CommonModule], template: \"<span *ngIf=\\\"auth.currentUser() as user; else notConnected\\\" style=\\\"border: 1px solid black;\\\">\\r\\n  Connect\\u00E9 en tant que {{ user?.email }}\\r\\n  <button (click)=\\\"onSettings()\\\" class=\\\"nav-btn\\\">\\r\\n   <i class=\\\"fas fa-cog\\\"></i>\\r\\n</button>\\r\\n</span>\\r\\n\\r\\n<ng-template #notConnected>\\r\\n  <button (click)=\\\"onConnectionRequest()\\\" class=\\\"nav-btn primary\\\">\\r\\n    <i class=\\\"fa-regular fa-user\\\"></i> Connexion\\r\\n  </button>\\r\\n</ng-template>\\r\\n\" }]\n        }], ctorParameters: () => [{ type: BgAuthService }, { type: i1$1.MatDialog }] });","originalLength":2901,"removedExports":[],"renderedExports":["BgNavigationAuthStripe"],"renderedLength":2385},"C:/Users/bertr/workspace_angular/bgOffreEmploiRepondeur/dist/bg-navigation-auth-stripe/tmp-esm2022/public-api.js":{"code":"/*\n * Public API Surface of bg-navigation-auth-stripe\n */","originalLength":225,"removedExports":[],"renderedExports":[],"renderedLength":57},"C:\\Users\\bertr\\workspace_angular\\bgOffreEmploiRepondeur\\dist\\bg-navigation-auth-stripe\\tmp-esm2022\\bg-navigation-auth-stripe.js":{"code":"/**\n * Generated bundle index. Do not edit.\n */","originalLength":131,"removedExports":[],"renderedExports":[],"renderedLength":47}},"referencedFiles":[],"code":"import * as i0 from '@angular/core';\nimport { signal, Injectable, Inject, Component } from '@angular/core';\nimport * as i1$1 from '@angular/material/dialog';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport * as i5 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i3 from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\nimport * as i1 from '@angular/fire/auth';\nimport { onAuthStateChanged, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, sendPasswordResetEmail, GoogleAuthProvider, signInWithPopup } from '@angular/fire/auth';\nimport * as i2 from '@angular/common/http';\n\nclass BgAuthService {\n    auth;\n    http;\n    userSignal = signal(null, ...(ngDevMode ? [{ debugName: \"userSignal\" }] : []));\n    baseUrl0 = 'https://europe-west1-job4you-78ed0.cloudfunctions.net/';\n    stripeCustomer;\n    stripeSession;\n    constructor(auth, http) {\n        this.auth = auth;\n        this.http = http;\n        onAuthStateChanged(this.auth, (user) => {\n            this.userSignal.set(user);\n        });\n        this.stripeCustomer = this.getStripeCustomerFromLocal();\n        this.stripeSession = this.getStripeSessionFromLocal();\n    }\n    get currentUser() {\n        return this.userSignal.asReadonly();\n    }\n    register(email, password) {\n        return createUserWithEmailAndPassword(this.auth, email, password);\n    }\n    login(email, password) {\n        console.log('login Tentative de connexion avec email :', email);\n        return signInWithEmailAndPassword(this.auth, email, password);\n    }\n    logout() {\n        this.stripeCustomer = null;\n        this.stripeSession = null;\n        this.saveStripeCustomerInLocal();\n        this.saveStripeSessionInLocal;\n        return signOut(this.auth);\n    }\n    sendPasswordResetEmail2(email) {\n        return sendPasswordResetEmail(this.auth, email);\n    }\n    loginWithGoogle() {\n        const provider = new GoogleAuthProvider();\n        signInWithPopup(this.auth, provider)\n            .then((result) => {\n            // L'utilisateur est connecté\n            const user = result.user;\n            console.log('Connecté :', user.email);\n            this.createOrSearchStripeCustomer(user.email);\n        })\n            .catch((error) => {\n            console.error('loginWithGoogle Erreur lors de la connexion :', error);\n            window.alert(error.message);\n        });\n    }\n    createOrSearchStripeCustomer(email) {\n        console.log('Recherche ou création du client Stripe pour email :', email);\n        if (!email)\n            return;\n        this.searchStripeCustomerOrCreate();\n    }\n    getEmail() {\n        if (this.currentUser() !== null) {\n            return this.currentUser()?.email;\n        }\n        else {\n            return 'No name';\n        }\n    }\n    searchStripeCustomerOrCreate(aCallBack) {\n        const baseUrl = `${this.baseUrl0}/bgstripesearchclientsbybguseridorcreateclient2`;\n        const params = new URLSearchParams({\n            email: this.getEmail() ?? '',\n        });\n        this.http.get(`${baseUrl}?${params.toString()}`, {}).subscribe({\n            next: (res) => {\n                console.log('BG Response from bgstripesearchclientsbybguseridorcreateclient:', res);\n                this.stripeCustomer = res;\n                this.saveStripeCustomerInLocal();\n                const stripeCustomerId = this.stripeCustomer?.id;\n                if (aCallBack) {\n                    console.log('BG aCallBack :', aCallBack);\n                    console.log('BG aCallBack getStripeCustomerId :', this.stripeCustomer?.id);\n                    if (stripeCustomerId) {\n                        aCallBack(stripeCustomerId);\n                    }\n                    else {\n                        console.error('BG Erreur: pas de stripeCustomerId après création ou recherche du client');\n                    }\n                }\n                else {\n                    console.log('BG pas de aCallBack fourni');\n                    if (stripeCustomerId) {\n                        this.fetchStripeSessionsByBgUserId2(stripeCustomerId); // Call fetchStripeSessionsByBgUserId2 directly\n                    }\n                }\n            },\n            error: (err) => {\n                console.error('Erreur from bgstripesearchclientsbybguseridorcreateclient:', err);\n            },\n        });\n    }\n    fetchStripeSessionsByBgUserId2(stripeCustomerId) {\n        console.log('searchStripeSessionsByBgUserId2 called with:', stripeCustomerId);\n        const baseUrl = `${this.baseUrl0}/bgstripegetsessionsbyclient2`;\n        const params = new URLSearchParams({\n            clientIdStripe: stripeCustomerId,\n        });\n        this.http.get(`${baseUrl}?${params.toString()}`, {}).subscribe({\n            next: (res) => {\n                console.log('Response from bgstripegetsessionsbyclient2:', res);\n                const listSessions = res.data;\n                console.log('listSessions:', listSessions);\n                if (listSessions.length > 0) {\n                    console.log('Sessions Stripe trouvées pour ce client.');\n                    for (const session of listSessions) {\n                        const invoiceId = session.invoice;\n                        console.log('invoiceId :', invoiceId);\n                        console.log('subscription:', session.subscription);\n                        console.log('mode:', session.mode);\n                        this.stripeSession = session;\n                        this.saveStripeSessionInLocal;\n                        if (invoiceId) {\n                            console.log('invoiceId found:', invoiceId);\n                            // Vous pouvez ajouter un traitement supplémentaire ici si nécessaire\n                        }\n                        else {\n                            console.log('No invoiceId found.');\n                        }\n                        console.log('Session ID:', session.id, ' - Amount Total:', session.amount_total, ' - Payment Status:', session.payment_status);\n                    }\n                }\n            },\n            error: (err) => {\n                console.error('Erreur from bgstripegetsessionsbyclient2:', err);\n            },\n        });\n    }\n    saveStripeCustomerInLocal() {\n        localStorage.setItem('stripeCustomer', JSON.stringify(this.stripeCustomer));\n    }\n    getStripeCustomerFromLocal() {\n        const stripeCustomer = localStorage.getItem('stripeCustomer');\n        return stripeCustomer ? JSON.parse(stripeCustomer) : null;\n    }\n    saveStripeSessionInLocal() {\n        localStorage.setItem('stripeSession', JSON.stringify(this.stripeSession));\n    }\n    getStripeSessionFromLocal() {\n        const stripeSession = localStorage.getItem('stripeSession');\n        return stripeSession ? JSON.parse(stripeSession) : null;\n    }\n    isUserAbonnementActif() {\n        return false;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0\", ngImport: i0, type: BgAuthService, deps: [{ token: i1.Auth }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.2.0\", ngImport: i0, type: BgAuthService, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0\", ngImport: i0, type: BgAuthService, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i1.Auth }, { type: i2.HttpClient }] });\nfunction isAbonnementActif(stripeSession) {\n    if (!stripeSession) {\n        return false;\n    }\n    // Consider the session active if it reports status 'complete' or if it hasn't expired yet.\n    const now = Math.floor(Date.now() / 1000);\n    if (stripeSession.status === 'complete') {\n        if (typeof stripeSession.expires_at === 'number' && stripeSession.expires_at > now) {\n            return true;\n        }\n    }\n    return false;\n}\n\nclass ComponentConnexionModale {\n    dialogRef;\n    auth;\n    data;\n    email = '';\n    password = '';\n    constructor(dialogRef, auth, data) {\n        this.dialogRef = dialogRef;\n        this.auth = auth;\n        this.data = data;\n    }\n    onLogin() {\n        console.log('A Tentative de connexion avec email :', this.email);\n        console.log('B Tentative de connexion avec auth :', this.auth);\n        this.auth.login(this.email, this.password).then(() => {\n            // Login réussi, on appelle Stripe\n            this.auth.createOrSearchStripeCustomer(this.email);\n            this.onClose();\n        })\n            .catch((err) => {\n            console.log('C Erreur Auth err:', err);\n            window.alert(err.message);\n        });\n        this.onClose();\n    }\n    onRegister() {\n        this.auth.register(this.email, this.password)\n            .then(() => {\n            this.auth.createOrSearchStripeCustomer(this.email);\n            this.onClose();\n        })\n            .catch((err) => {\n            console.log('C Erreur Auth err:', err);\n            window.alert(err.message);\n        });\n        this.onClose();\n    }\n    onPasswordReset() {\n        console.log('A Tentative de reset password avec email :', this.email);\n        const obj = this.auth\n            .sendPasswordResetEmail2(this.email)\n            .catch((err) => {\n            console.log('C Erreur Auth err:', err);\n            window.alert(err.message);\n        });\n        console.log('B Objet de reset password:', obj);\n        obj.then((res) => {\n            console.log('D Réponse de reset password: res', res);\n            console.log('E mail de reset password: ', this.email);\n            window.alert('Email de réinitialisation envoyé à ' + this.email);\n        });\n        this.onClose();\n    }\n    onNoClick() {\n        this.dialogRef.close();\n    }\n    onClose() {\n        this.dialogRef.close();\n    }\n    onLoginWithGoogle() {\n        this.auth.loginWithGoogle();\n        this.onClose();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0\", ngImport: i0, type: ComponentConnexionModale, deps: [{ token: i1$1.MatDialogRef }, { token: BgAuthService }, { token: MAT_DIALOG_DATA }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.2.0\", type: ComponentConnexionModale, isStandalone: true, selector: \"app-component-connexion-modale\", ngImport: i0, template: \"\\r\\n<div style=\\\" margin: 20px;\\\">\\r\\n<form class=\\\"login-form\\\">\\r\\n  <div class=\\\"form-group\\\">\\r\\n    <input [(ngModel)]=\\\"email\\\" name=\\\"email\\\" placeholder=\\\"Email\\\" />\\r\\n  </div>\\r\\n  <div class=\\\"form-group\\\">\\r\\n    <input [(ngModel)]=\\\"password\\\" name=\\\"password\\\" type=\\\"password\\\" placeholder=\\\"Password\\\"/>\\r\\n  </div>\\r\\n  <div class=\\\"button-group\\\">\\r\\n    <button (click)=\\\"onLogin()\\\" type=\\\"submit\\\">Se connecter</button>\\r\\n    <button (click)=\\\"onPasswordReset()\\\" type=\\\"button\\\">Mot de passe oubli\\u00E9</button>\\r\\n\\r\\n  </div>\\r\\n  <div class=\\\"button-group\\\">\\r\\n    <button (click)=\\\"onLoginWithGoogle()\\\" type=\\\"submit\\\">Login with Google</button>\\r\\n  </div>\\r\\n  <div class=\\\"button-group\\\">\\r\\n\\r\\n    <button (click)=\\\"onRegister()\\\" type=\\\"submit\\\">Register</button>\\r\\n  </div>\\r\\n</form>\\r\\n\\r\\n<div style=\\\"text-align: right; margin-top: 20px;margin-right:5;\\\">\\r\\n  <button mat-button (click)=\\\"onClose()\\\">Fermer</button>\\r\\n</div>\\r\\n</div>\\r\\n\\r\\n\\r\\n\", styles: [\"\"], dependencies: [{ kind: \"ngmodule\", type: CommonModule }, { kind: \"ngmodule\", type: FormsModule }, { kind: \"directive\", type: i3.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { kind: \"directive\", type: i3.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i3.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i3.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { kind: \"directive\", type: i3.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { kind: \"directive\", type: i3.NgForm, selector: \"form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]\", inputs: [\"ngFormOptions\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0\", ngImport: i0, type: ComponentConnexionModale, decorators: [{\n            type: Component,\n            args: [{ selector: 'app-component-connexion-modale', imports: [CommonModule, FormsModule], template: \"\\r\\n<div style=\\\" margin: 20px;\\\">\\r\\n<form class=\\\"login-form\\\">\\r\\n  <div class=\\\"form-group\\\">\\r\\n    <input [(ngModel)]=\\\"email\\\" name=\\\"email\\\" placeholder=\\\"Email\\\" />\\r\\n  </div>\\r\\n  <div class=\\\"form-group\\\">\\r\\n    <input [(ngModel)]=\\\"password\\\" name=\\\"password\\\" type=\\\"password\\\" placeholder=\\\"Password\\\"/>\\r\\n  </div>\\r\\n  <div class=\\\"button-group\\\">\\r\\n    <button (click)=\\\"onLogin()\\\" type=\\\"submit\\\">Se connecter</button>\\r\\n    <button (click)=\\\"onPasswordReset()\\\" type=\\\"button\\\">Mot de passe oubli\\u00E9</button>\\r\\n\\r\\n  </div>\\r\\n  <div class=\\\"button-group\\\">\\r\\n    <button (click)=\\\"onLoginWithGoogle()\\\" type=\\\"submit\\\">Login with Google</button>\\r\\n  </div>\\r\\n  <div class=\\\"button-group\\\">\\r\\n\\r\\n    <button (click)=\\\"onRegister()\\\" type=\\\"submit\\\">Register</button>\\r\\n  </div>\\r\\n</form>\\r\\n\\r\\n<div style=\\\"text-align: right; margin-top: 20px;margin-right:5;\\\">\\r\\n  <button mat-button (click)=\\\"onClose()\\\">Fermer</button>\\r\\n</div>\\r\\n</div>\\r\\n\\r\\n\\r\\n\" }]\n        }], ctorParameters: () => [{ type: i1$1.MatDialogRef }, { type: BgAuthService }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_DIALOG_DATA]\n                }] }] });\n\n/**\n * Service providing backend function URLs and versioning.\n * Pour lancer l'emulateur local: >bg build && firebase emulators:start --only functions\n * Pour déployer les fonctions: > bg build && firebase deploy --only functions\n *\n */\nclass BgBackFunctions {\n    getUrlHost() {\n        if ((window.location.hostname === '127.0.0.1') || (window.location.hostname === 'localhost')) {\n            return 'http://127.0.0.1:5001/job4you-78ed0/europe-west1';\n        }\n        return 'https://europe-west1-job4you-78ed0.cloudfunctions.net';\n    }\n    getVerion() {\n        return '2';\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0\", ngImport: i0, type: BgBackFunctions, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.2.0\", ngImport: i0, type: BgBackFunctions, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0\", ngImport: i0, type: BgBackFunctions, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }] });\n\nclass ComponentSettingsModale {\n    dialogRef;\n    bgAuth;\n    http;\n    changeDetectorRef;\n    bgBackFunctions;\n    email = '';\n    stripeIdClient = 'No StripeIdClien';\n    stripeIdSession = 'No IdSession';\n    priceIdStripeOneTime = {\n        id: 'price_1SBWfpI256EUPY44i7gmazbu',\n        mode: 'payment',\n    };\n    priceIdStripeAbonnement = {\n        id: 'price_1SC2ZiI256EUPY44UFeNCj8x',\n        mode: 'subscription',\n    };\n    constructor(dialogRef, bgAuth, http, changeDetectorRef, bgBackFunctions) {\n        this.dialogRef = dialogRef;\n        this.bgAuth = bgAuth;\n        this.http = http;\n        this.changeDetectorRef = changeDetectorRef;\n        this.bgBackFunctions = bgBackFunctions;\n        console.log('ComponentSettingsModale constructor bgAuth :', this.bgAuth);\n    }\n    isAbonnementActif() {\n        return this.bgAuth.isUserAbonnementActif();\n    }\n    ngOnInit() {\n        this.email = this.bgAuth.currentUser()?.email || '';\n        this.stripeIdClient = this.bgAuth.stripeCustomer?.id || 'No StripeIdClient';\n        this.stripeIdSession = this.bgAuth.stripeSession?.id || 'No IdSession';\n        this.bgAuth.baseUrl0 = this.bgBackFunctions.getUrlHost();\n    }\n    onLogout() {\n        console.log('B Tentative de logout avec auth :', this.bgAuth);\n        this.bgAuth.logout();\n        this.onClose();\n    }\n    onNoClick() {\n        this.dialogRef.close();\n    }\n    onClose() {\n        this.dialogRef.close();\n    }\n    abonnement() {\n        console.log('abonnement request');\n        this.getStripePaymentLink();\n    }\n    getStripeCustomerId() {\n        return this.bgAuth.stripeCustomer?.id;\n    }\n    getStripePaymentLink() {\n        if (this.getStripeCustomerId()) {\n            this.getStripePaymentLink2();\n        }\n        else {\n            console.log('Aucun client Stripe rencontré pour cet utilisateur.');\n            this.bgAuth.searchStripeCustomerOrCreate(this.getStripePaymentLink2.bind(this));\n        }\n    }\n    getStripePaymentLink2() {\n        const priceIdStripe = this.priceIdStripeAbonnement;\n        console.log('getStripePaymentLink pour le priceIdStripe :', priceIdStripe);\n        const currentHost = window.location.origin;\n        if (!priceIdStripe?.id || !priceIdStripe?.mode || !this.getStripeCustomerId() || !this.bgAuth.getEmail()) {\n            console.error('Paramètre manquant pour Stripe ! email :', this.bgAuth.getEmail());\n            console.error('Paramètre manquant pour Stripe ! priceIdStripe :', priceIdStripe);\n            console.error('Paramètre manquant pour Stripe ! stripeCustomerId :', this.getStripeCustomerId());\n            return;\n        }\n        const params = new URLSearchParams({\n            email: this.bgAuth.getEmail() ?? '',\n            priceIdStripe: priceIdStripe.id,\n            mode: priceIdStripe.mode,\n            clientIdStripe: this.getStripeCustomerId() ?? '',\n            succesUrl: `${currentHost}/merci`,\n            cancelUrl: `${currentHost}/cancelStripe`,\n        });\n        console.log('Appel de la fonction cloud bgstripegetpaymentlink avec :', params.toString());\n        const url0 = `${this.bgAuth.baseUrl0}/bgstripegetpaymentlink2?${params.toString()}`;\n        console.log('URL complète:', url0);\n        this.http.get(url0, {}).subscribe({\n            next: (res) => {\n                console.log('Response from bgstripegetpaymentlink:', res);\n                const url = res.url;\n                console.log('url:', url);\n                // window.open(url, '_self');\n                if (url) {\n                    window.location.href = url;\n                }\n                else {\n                    console.error('Pas de lien de paiement reçu de Stripe !');\n                    if (res.error) {\n                        const message = res.error.message;\n                        console.error('Message d\\'erreur Stripe:', message);\n                        console.error('Erreur Stripe:', res.error);\n                    }\n                }\n            },\n            error: (err) => {\n                console.error('Erreur from bgstripegetpaymentlink:', err);\n            },\n        });\n    }\n    desabonnement() {\n        console.log('desabonnement request');\n        const stripeCustomerId = this.getStripeCustomerId();\n        if (!stripeCustomerId) {\n            console.log('Aucun client Stripe rencontré pour cet utilisateur.');\n            this.bgAuth.searchStripeCustomerOrCreate(this.resilierAbonnement2.bind(this));\n        }\n        else {\n            this.resilierAbonnement2(stripeCustomerId);\n        }\n    }\n    resilierAbonnement2(stripeCustomerId) {\n        console.log('resilierAbonnement2 pour le stripeCustomerId :', stripeCustomerId);\n        this.http\n            .post(`${this.bgAuth.baseUrl0}/bgstripegetsession2`, {\n            clientId: stripeCustomerId,\n            urlRetour: window.location.origin + \"/moncomptebg\"\n        })\n            .subscribe({\n            next: (res) => {\n                console.log('Response from bgstripesubscriptionresilience2:', res);\n                const url = res.url;\n                console.log('url:', url);\n                if (url) {\n                    window.location.href = url;\n                }\n            },\n            error: (err) => {\n                console.error('Erreur from bgstripesubscriptionresilience2:', err);\n            },\n        });\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0\", ngImport: i0, type: ComponentSettingsModale, deps: [{ token: i1$1.MatDialogRef }, { token: BgAuthService }, { token: i2.HttpClient }, { token: i0.ChangeDetectorRef }, { token: BgBackFunctions }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.2.0\", type: ComponentSettingsModale, isStandalone: true, selector: \"app-component-connexion-modale\", ngImport: i0, template: \"\\r\\n<div style=\\\" margin: 20px;\\\">\\r\\n<form class=\\\"login-form\\\">\\r\\n  <div class=\\\"form-group\\\">\\r\\n    {{ email }}\\r\\n  </div>\\r\\n<div class=\\\"form-group\\\">\\r\\n   Id Client: {{ stripeIdClient }}\\r\\n</div>\\r\\n\\r\\n<div class=\\\"form-group\\\">\\r\\n   Id Session: {{ stripeIdSession }}\\r\\n</div>\\r\\n\\r\\n  <div class=\\\"button-group\\\">\\r\\n    <button (click)=\\\"onLogout()\\\" type=\\\"submit\\\">Se deconnecter</button>\\r\\n  </div>\\r\\n\\r\\n<div *ngIf=\\\"isAbonnementActif(); else notAbonned\\\" style=\\\"border: 1px solid black;\\\">\\r\\n  <div class=\\\"button-group\\\">\\r\\n  <button (click)=\\\"desabonnement()\\\" type=\\\"submit\\\" >\\r\\n     Desabonnement\\r\\n  </button>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<ng-template #notAbonned>\\r\\n  <div class=\\\"button-group\\\">\\r\\n  <button (click)=\\\"abonnement()\\\" type=\\\"submit\\\">\\r\\n    Abonnement\\r\\n  </button>\\r\\n  </div>\\r\\n</ng-template>\\r\\n</form>\\r\\n\\r\\n<div style=\\\"text-align: right; margin-top: 20px;margin-right:5;\\\">\\r\\n  <button mat-button (click)=\\\"onClose()\\\">Fermer</button>\\r\\n</div>\\r\\n</div>\\r\\n\\r\\n\\r\\n\", styles: [\"\"], dependencies: [{ kind: \"ngmodule\", type: CommonModule }, { kind: \"directive\", type: i5.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"ngmodule\", type: FormsModule }, { kind: \"directive\", type: i3.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { kind: \"directive\", type: i3.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { kind: \"directive\", type: i3.NgForm, selector: \"form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]\", inputs: [\"ngFormOptions\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0\", ngImport: i0, type: ComponentSettingsModale, decorators: [{\n            type: Component,\n            args: [{ selector: 'app-component-connexion-modale', imports: [CommonModule, FormsModule], template: \"\\r\\n<div style=\\\" margin: 20px;\\\">\\r\\n<form class=\\\"login-form\\\">\\r\\n  <div class=\\\"form-group\\\">\\r\\n    {{ email }}\\r\\n  </div>\\r\\n<div class=\\\"form-group\\\">\\r\\n   Id Client: {{ stripeIdClient }}\\r\\n</div>\\r\\n\\r\\n<div class=\\\"form-group\\\">\\r\\n   Id Session: {{ stripeIdSession }}\\r\\n</div>\\r\\n\\r\\n  <div class=\\\"button-group\\\">\\r\\n    <button (click)=\\\"onLogout()\\\" type=\\\"submit\\\">Se deconnecter</button>\\r\\n  </div>\\r\\n\\r\\n<div *ngIf=\\\"isAbonnementActif(); else notAbonned\\\" style=\\\"border: 1px solid black;\\\">\\r\\n  <div class=\\\"button-group\\\">\\r\\n  <button (click)=\\\"desabonnement()\\\" type=\\\"submit\\\" >\\r\\n     Desabonnement\\r\\n  </button>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<ng-template #notAbonned>\\r\\n  <div class=\\\"button-group\\\">\\r\\n  <button (click)=\\\"abonnement()\\\" type=\\\"submit\\\">\\r\\n    Abonnement\\r\\n  </button>\\r\\n  </div>\\r\\n</ng-template>\\r\\n</form>\\r\\n\\r\\n<div style=\\\"text-align: right; margin-top: 20px;margin-right:5;\\\">\\r\\n  <button mat-button (click)=\\\"onClose()\\\">Fermer</button>\\r\\n</div>\\r\\n</div>\\r\\n\\r\\n\\r\\n\" }]\n        }], ctorParameters: () => [{ type: i1$1.MatDialogRef }, { type: BgAuthService }, { type: i2.HttpClient }, { type: i0.ChangeDetectorRef }, { type: BgBackFunctions }] });\n\nclass BgNavigationAuthStripe {\n    auth;\n    dialog;\n    constructor(auth, dialog) {\n        this.auth = auth;\n        this.dialog = dialog;\n    }\n    onSettings() {\n        console.log('Ouverture des paramètres utilisateur');\n        this.dialog.open(ComponentSettingsModale, {\n            data: 'bbb',\n        });\n    }\n    onConnectionRequest() {\n        console.log('Tentative de connexion  :');\n        this.dialog.open(ComponentConnexionModale, {\n            data: 'aaa',\n        });\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0\", ngImport: i0, type: BgNavigationAuthStripe, deps: [{ token: BgAuthService }, { token: i1$1.MatDialog }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.2.0\", type: BgNavigationAuthStripe, isStandalone: true, selector: \"lib-bg-navigation-auth-stripe\", ngImport: i0, template: \"<span *ngIf=\\\"auth.currentUser() as user; else notConnected\\\" style=\\\"border: 1px solid black;\\\">\\r\\n  Connect\\u00E9 en tant que {{ user?.email }}\\r\\n  <button (click)=\\\"onSettings()\\\" class=\\\"nav-btn\\\">\\r\\n   <i class=\\\"fas fa-cog\\\"></i>\\r\\n</button>\\r\\n</span>\\r\\n\\r\\n<ng-template #notConnected>\\r\\n  <button (click)=\\\"onConnectionRequest()\\\" class=\\\"nav-btn primary\\\">\\r\\n    <i class=\\\"fa-regular fa-user\\\"></i> Connexion\\r\\n  </button>\\r\\n</ng-template>\\r\\n\", styles: [\"\"], dependencies: [{ kind: \"ngmodule\", type: CommonModule }, { kind: \"directive\", type: i5.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0\", ngImport: i0, type: BgNavigationAuthStripe, decorators: [{\n            type: Component,\n            args: [{ selector: 'lib-bg-navigation-auth-stripe', imports: [CommonModule], template: \"<span *ngIf=\\\"auth.currentUser() as user; else notConnected\\\" style=\\\"border: 1px solid black;\\\">\\r\\n  Connect\\u00E9 en tant que {{ user?.email }}\\r\\n  <button (click)=\\\"onSettings()\\\" class=\\\"nav-btn\\\">\\r\\n   <i class=\\\"fas fa-cog\\\"></i>\\r\\n</button>\\r\\n</span>\\r\\n\\r\\n<ng-template #notConnected>\\r\\n  <button (click)=\\\"onConnectionRequest()\\\" class=\\\"nav-btn primary\\\">\\r\\n    <i class=\\\"fa-regular fa-user\\\"></i> Connexion\\r\\n  </button>\\r\\n</ng-template>\\r\\n\" }]\n        }], ctorParameters: () => [{ type: BgAuthService }, { type: i1$1.MatDialog }] });\n\n/*\n * Public API Surface of bg-navigation-auth-stripe\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BgAuthService, BgBackFunctions, BgNavigationAuthStripe };\n//# sourceMappingURL=bg-navigation-auth-stripe.mjs.map\n","map":null,"preliminaryFileName":"bg-navigation-auth-stripe.mjs","sourcemapFileName":"bg-navigation-auth-stripe.mjs.map"},{"fileName":"bg-navigation-auth-stripe.mjs.map","names":[],"needsCodeReference":false,"originalFileName":null,"originalFileNames":[],"source":"{\"version\":3,\"file\":\"bg-navigation-auth-stripe.mjs\",\"sources\":[\"../../../projects/bg-navigation-auth-stripe/src/lib/bg-auth-service.ts\",\"../../../projects/bg-navigation-auth-stripe/src/lib/component-connexion-modale/component-connexion-modale.ts\",\"../../../projects/bg-navigation-auth-stripe/src/lib/component-connexion-modale/component-connexion-modale.html\",\"../../../projects/bg-navigation-auth-stripe/src/lib/bg-back-functions.ts\",\"../../../projects/bg-navigation-auth-stripe/src/lib/component-settings-modale/component-settings-modale.ts\",\"../../../projects/bg-navigation-auth-stripe/src/lib/component-settings-modale/component-settings-modale.html\",\"../../../projects/bg-navigation-auth-stripe/src/lib/bg-navigation-auth-stripe.ts\",\"../../../projects/bg-navigation-auth-stripe/src/lib/bg-navigation-auth-stripe.html\",\"../../../projects/bg-navigation-auth-stripe/src/public-api.ts\",\"../../../projects/bg-navigation-auth-stripe/src/bg-navigation-auth-stripe.ts\"],\"sourcesContent\":[\"\\r\\nimport { HttpClient } from '@angular/common/http';\\r\\nimport {  Injectable, signal } from '@angular/core';\\r\\nimport {\\r\\n  Auth,\\r\\n  GoogleAuthProvider,\\r\\n  signInWithPopup,\\r\\n  signInWithEmailAndPassword,\\r\\n  createUserWithEmailAndPassword,\\r\\n  signOut,\\r\\n  onAuthStateChanged,\\r\\n  User,\\r\\n  sendPasswordResetEmail,\\r\\n} from '@angular/fire/auth';\\r\\n\\r\\n@Injectable({ providedIn: 'root' })\\r\\nexport class BgAuthService {\\r\\n\\r\\n  private userSignal = signal<User | null>(null);\\r\\nbaseUrl0 =\\r\\n      'https://europe-west1-job4you-78ed0.cloudfunctions.net/';\\r\\n\\r\\n  stripeCustomer!: StripeCustomer | null;\\r\\n  stripeSession!:StripeSession|null;\\r\\n  constructor(public auth: Auth, private http: HttpClient) {\\r\\n    onAuthStateChanged(this.auth, (user) => {\\r\\n      this.userSignal.set(user);\\r\\n    });\\r\\n    this.stripeCustomer = this.getStripeCustomerFromLocal();\\r\\n    this.stripeSession=this.getStripeSessionFromLocal();\\r\\n\\r\\n  }\\r\\n\\r\\n  get currentUser() {\\r\\n    return this.userSignal.asReadonly();\\r\\n  }\\r\\n\\r\\n  register(email: string, password: string) {\\r\\n    return createUserWithEmailAndPassword(this.auth, email, password);\\r\\n  }\\r\\n\\r\\n  login(email: string, password: string) {\\r\\n    console.log('login Tentative de connexion avec email :', email);\\r\\n    return signInWithEmailAndPassword(this.auth, email, password);\\r\\n\\r\\n  }\\r\\n\\r\\n  logout() {\\r\\n\\r\\n    this.stripeCustomer = null;\\r\\n    this.stripeSession = null;\\r\\n    this.saveStripeCustomerInLocal();\\r\\n    this.saveStripeSessionInLocal\\r\\n    return signOut(this.auth);\\r\\n  }\\r\\n\\r\\n  sendPasswordResetEmail2(email: string) {\\r\\n    return sendPasswordResetEmail(this.auth, email);\\r\\n  }\\r\\n\\r\\n  loginWithGoogle() {\\r\\n    const provider = new GoogleAuthProvider();\\r\\n\\r\\n    signInWithPopup(this.auth, provider)\\r\\n      .then((result) => {\\r\\n        // L'utilisateur est connecté\\r\\n        const user = result.user;\\r\\n        console.log('Connecté :', user.email);\\r\\n        this.createOrSearchStripeCustomer(user.email);\\r\\n      })\\r\\n      .catch((error) => {\\r\\n        console.error('loginWithGoogle Erreur lors de la connexion :', error);\\r\\n        window.alert(error.message);\\r\\n      });\\r\\n  }\\r\\n\\r\\n  createOrSearchStripeCustomer(email: string|null) {\\r\\n    console.log('Recherche ou création du client Stripe pour email :', email);\\r\\n    if(!email) return;\\r\\n    this.searchStripeCustomerOrCreate();\\r\\n\\r\\n  }\\r\\n\\r\\n  getEmail() {\\r\\n    if (this.currentUser() !== null) {\\r\\n      return this.currentUser()?.email;\\r\\n    } else {\\r\\n      return 'No name';\\r\\n    }\\r\\n}\\r\\n\\r\\n  searchStripeCustomerOrCreate(aCallBack?: (stripeCustomerId: string) => void) {\\r\\n    const baseUrl =\\r\\n      `${this.baseUrl0}/bgstripesearchclientsbybguseridorcreateclient2`;\\r\\n    const params = new URLSearchParams({\\r\\n      email: this.getEmail() ?? '',\\r\\n    });\\r\\n    this.http.get<any>(`${baseUrl}?${params.toString()}`, {}).subscribe({\\r\\n      next: (res) => {\\r\\n        console.log('BG Response from bgstripesearchclientsbybguseridorcreateclient:', res);\\r\\n        this.stripeCustomer = res;\\r\\n        this.saveStripeCustomerInLocal();\\r\\n        const stripeCustomerId = this.stripeCustomer?.id;\\r\\n        if(aCallBack){\\r\\n          console.log('BG aCallBack :', aCallBack);\\r\\n          console.log('BG aCallBack getStripeCustomerId :',this.stripeCustomer?.id);\\r\\n\\r\\n          if(stripeCustomerId){\\r\\n            aCallBack(stripeCustomerId);\\r\\n          } else {\\r\\n            console.error('BG Erreur: pas de stripeCustomerId après création ou recherche du client');\\r\\n          }\\r\\n\\r\\n        }else{\\r\\n          console.log('BG pas de aCallBack fourni');\\r\\n          if(stripeCustomerId){\\r\\n            this.fetchStripeSessionsByBgUserId2(stripeCustomerId);  // Call fetchStripeSessionsByBgUserId2 directly\\r\\n          }\\r\\n        }\\r\\n      },\\r\\n      error: (err) => {\\r\\n        console.error('Erreur from bgstripesearchclientsbybguseridorcreateclient:', err);\\r\\n      },\\r\\n    });\\r\\n  }\\r\\n\\r\\n\\r\\n  fetchStripeSessionsByBgUserId2(stripeCustomerId: string) {\\r\\n\\r\\n  console.log('searchStripeSessionsByBgUserId2 called with:', stripeCustomerId);\\r\\n   const baseUrl =\\r\\n      `${this.baseUrl0}/bgstripegetsessionsbyclient2`;\\r\\n    const params = new URLSearchParams({\\r\\n      clientIdStripe: stripeCustomerId,\\r\\n    });\\r\\n    this.http.get<any>(`${baseUrl}?${params.toString()}`, {}).subscribe({\\r\\n      next: (res) => {\\r\\n        console.log('Response from bgstripegetsessionsbyclient2:', res);\\r\\n        const listSessions:Array<StripeSession> = res.data;\\r\\n        console.log('listSessions:', listSessions);\\r\\n        if (listSessions.length > 0) {\\r\\n         console.log('Sessions Stripe trouvées pour ce client.');\\r\\n        for(const session of listSessions){\\r\\n          const invoiceId = session.invoice;\\r\\n           console.log('invoiceId :', invoiceId);\\r\\n           console.log('subscription:', session.subscription);\\r\\n            console.log('mode:', session.mode);\\r\\n          this.stripeSession = session;\\r\\n            this.saveStripeSessionInLocal\\r\\n          if(invoiceId){\\r\\n            console.log('invoiceId found:', invoiceId);\\r\\n            // Vous pouvez ajouter un traitement supplémentaire ici si nécessaire\\r\\n          }else {\\r\\n            console.log('No invoiceId found.');\\r\\n          }\\r\\n          console.log('Session ID:', session.id, ' - Amount Total:', session.amount_total, ' - Payment Status:', session.payment_status);\\r\\n        }\\r\\n      }},\\r\\n      error: (err) => {\\r\\n        console.error('Erreur from bgstripegetsessionsbyclient2:', err);\\r\\n      },\\r\\n    });\\r\\n}\\r\\n\\r\\n  saveStripeCustomerInLocal() {\\r\\n    localStorage.setItem('stripeCustomer', JSON.stringify(this.stripeCustomer));\\r\\n  }\\r\\n  getStripeCustomerFromLocal(): StripeCustomer | null {\\r\\n    const stripeCustomer = localStorage.getItem('stripeCustomer');\\r\\n    return stripeCustomer ? JSON.parse(stripeCustomer) : null;\\r\\n  }\\r\\n\\r\\n  saveStripeSessionInLocal() {\\r\\n    localStorage.setItem('stripeSession', JSON.stringify(this.stripeSession));\\r\\n  }\\r\\n  getStripeSessionFromLocal(): StripeSession | null {\\r\\n    const stripeSession = localStorage.getItem('stripeSession');\\r\\n    return stripeSession ? JSON.parse(stripeSession) : null;\\r\\n  }\\r\\n\\r\\n\\r\\n  isUserAbonnementActif():boolean {\\r\\n    return false;\\r\\n  }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\nexport type StripeCustomer = {\\r\\n  address: {\\r\\n    city: string | null;\\r\\n    country: string | null;\\r\\n    line1: string | null;\\r\\n    line2: string | null;\\r\\n    postal_code: string | null;\\r\\n    state?: string | null;\\r\\n  };\\r\\n  balance: number;\\r\\n  created: number;\\r\\n  currency: string;\\r\\n  default_source: string | null;\\r\\n  delinquent: boolean;\\r\\n  description: string | null;\\r\\n  discount: any | null;\\r\\n  email: string | null;\\r\\n  id: string;\\r\\n  invoice_prefix: string;\\r\\n  invoice_settings: {\\r\\n    custom_fields: any | null;\\r\\n    default_payment_method: string | null;\\r\\n    footer: string | null;\\r\\n    rendering_options: any | null;\\r\\n  };\\r\\n  livemode: boolean;\\r\\n  metadata: Record<string, any>;\\r\\n  name: string | null;\\r\\n  object: string;\\r\\n  phone: string | null;\\r\\n  preferred_locales: string[];\\r\\n  shipping: any | null;\\r\\n  tax_exempt: string;\\r\\n  test_clock: any | null;\\r\\n};\\r\\n\\r\\n\\r\\n\\r\\nexport interface StripeInvoice {\\r\\n  id: string;\\r\\n  object: string;\\r\\n  account_country: string;\\r\\n  account_name: string;\\r\\n  account_tax_ids: string[] | null;\\r\\n  amount_due: number;\\r\\n  amount_overpaid: number;\\r\\n  amount_paid: number;\\r\\n  amount_remaining: number;\\r\\n  amount_shipping: number;\\r\\n  application: string | null;\\r\\n  attempt_count: number;\\r\\n  attempted: boolean;\\r\\n  auto_advance: boolean;\\r\\n  automatic_tax: {\\r\\n    disabled_reason: string | null;\\r\\n    enabled: boolean;\\r\\n    liability: string | null;\\r\\n    provider: string | null;\\r\\n    status: string | null;\\r\\n  };\\r\\n  automatically_finalizes_at: number | null;\\r\\n  billing_reason: string;\\r\\n  collection_method: string;\\r\\n  created: number;\\r\\n  currency: string;\\r\\n  custom_fields: any | null;\\r\\n  customer: string;\\r\\n  customer_address: any | null;\\r\\n  customer_email: string | null;\\r\\n  customer_name: string | null;\\r\\n  customer_phone: string | null;\\r\\n  customer_shipping: any | null;\\r\\n  customer_tax_exempt: string;\\r\\n  customer_tax_ids: any[];\\r\\n  default_payment_method: string | null;\\r\\n  default_source: string | null;\\r\\n  default_tax_rates: any[];\\r\\n  description: string | null;\\r\\n  discounts: any[];\\r\\n  due_date: number | null;\\r\\n  effective_at: number;\\r\\n  ending_balance: number;\\r\\n  footer: string | null;\\r\\n  from_invoice: any | null;\\r\\n  hosted_invoice_url: string | null;\\r\\n  invoice_pdf: string | null;\\r\\n  issuer: {\\r\\n    type: string;\\r\\n  };\\r\\n  last_finalization_error: any | null;\\r\\n  latest_revision: any | null;\\r\\n  lines: {\\r\\n    object: string;\\r\\n    data: Array<{\\r\\n      id: string;\\r\\n      object: string;\\r\\n      amount: number;\\r\\n      currency: string;\\r\\n      description: string;\\r\\n      discount_amounts: any[];\\r\\n      discountable: boolean;\\r\\n      discounts: any[];\\r\\n      invoice: string;\\r\\n      livemode: boolean;\\r\\n      metadata: Record<string, any>;\\r\\n      parent: {\\r\\n        invoice_item_details: any | null;\\r\\n        subscription_item_details?: {\\r\\n          invoice_item: string | null;\\r\\n          proration: boolean;\\r\\n          proration_details: {\\r\\n            credited_items: any | null;\\r\\n          };\\r\\n          subscription: string;\\r\\n          subscription_item: string;\\r\\n        };\\r\\n        type: string;\\r\\n      };\\r\\n      period: {\\r\\n        end: number;\\r\\n        start: number;\\r\\n      };\\r\\n      pretax_credit_amounts: any[];\\r\\n      pricing: {\\r\\n        price_details?: {\\r\\n          price: string;\\r\\n          product: string;\\r\\n        };\\r\\n        type: string;\\r\\n        unit_amount_decimal: string;\\r\\n      };\\r\\n      quantity: number;\\r\\n      taxes: any[];\\r\\n    }>;\\r\\n    has_more: boolean;\\r\\n    total_count: number;\\r\\n    url: string;\\r\\n  };\\r\\n  livemode: boolean;\\r\\n  metadata: Record<string, any>;\\r\\n  next_payment_attempt: number | null;\\r\\n  number: string;\\r\\n  on_behalf_of: string | null;\\r\\n  parent: {\\r\\n    quote_details: any | null;\\r\\n    subscription_details?: {\\r\\n      metadata: Record<string, any>;\\r\\n      subscription: string;\\r\\n    };\\r\\n    type: string;\\r\\n  };\\r\\n  payment_settings: {\\r\\n    default_mandate: string | null;\\r\\n    payment_method_options: {\\r\\n      acss_debit: any | null;\\r\\n      bancontact: any | null;\\r\\n      card?: {\\r\\n        request_three_d_secure: string;\\r\\n      };\\r\\n      customer_balance: any | null;\\r\\n      konbini: any | null;\\r\\n      sepa_debit: any | null;\\r\\n      us_bank_account: any | null;\\r\\n    };\\r\\n    payment_method_types: string[] | null;\\r\\n  };\\r\\n  period_end: number;\\r\\n  period_start: number;\\r\\n  post_payment_credit_notes_amount: number;\\r\\n  pre_payment_credit_notes_amount: number;\\r\\n  receipt_number: string | null;\\r\\n  rendering: any | null;\\r\\n  shipping_cost: any | null;\\r\\n  shipping_details: any | null;\\r\\n  starting_balance: number;\\r\\n  statement_descriptor: string | null;\\r\\n  status: string;\\r\\n  status_transitions: {\\r\\n    finalized_at: number | null;\\r\\n    marked_uncollectible_at: number | null;\\r\\n    paid_at: number | null;\\r\\n    voided_at: number | null;\\r\\n  };\\r\\n  subtotal: number;\\r\\n  subtotal_excluding_tax: number;\\r\\n  test_clock: any | null;\\r\\n  total: number;\\r\\n  total_discount_amounts: any[];\\r\\n  total_excluding_tax: number;\\r\\n  total_pretax_credit_amounts: any[];\\r\\n  total_taxes: any[];\\r\\n  webhooks_delivered_at: number | null;\\r\\n}\\r\\n\\r\\nexport interface StripeSession {\\r\\n  id: string;\\r\\n  object: string;\\r\\n  adaptive_pricing: {\\r\\n    enabled: boolean;\\r\\n  };\\r\\n  after_expiration: any | null;\\r\\n  allow_promotion_codes: boolean | null;\\r\\n  amount_subtotal: number;\\r\\n  amount_total: number;\\r\\n  automatic_tax: {\\r\\n    enabled: boolean;\\r\\n    liability: any | null;\\r\\n    provider: any | null;\\r\\n    status: any | null;\\r\\n  };\\r\\n  billing_address_collection: any | null;\\r\\n  branding_settings: {\\r\\n    background_color: string;\\r\\n    border_style: string;\\r\\n    button_color: string;\\r\\n    display_name: string;\\r\\n    font_family: string;\\r\\n    icon: string | null;\\r\\n    logo: string | null;\\r\\n  };\\r\\n  cancel_url: string;\\r\\n  client_reference_id: string | null;\\r\\n  client_secret: string | null;\\r\\n  collected_information: {\\r\\n    business_name: string | null;\\r\\n    individual_name: string | null;\\r\\n    shipping_details: any | null;\\r\\n  };\\r\\n  consent: any | null;\\r\\n  consent_collection: any | null;\\r\\n  created: number;\\r\\n  currency: string;\\r\\n  currency_conversion: any | null;\\r\\n  custom_fields: any[];\\r\\n  custom_text: {\\r\\n    after_submit: string | null;\\r\\n    shipping_address: string | null;\\r\\n    submit: string | null;\\r\\n    terms_of_service_acceptance: string | null;\\r\\n  };\\r\\n  customer: string;\\r\\n  customer_creation: string | null;\\r\\n  customer_details: {\\r\\n    address: {\\r\\n      city: string | null;\\r\\n      country: string | null;\\r\\n      line1: string | null;\\r\\n      line2: string | null;\\r\\n      postal_code: string | null;\\r\\n      state: string | null;\\r\\n    };\\r\\n    business_name: string | null;\\r\\n    email: string | null;\\r\\n    individual_name: string | null;\\r\\n    name: string | null;\\r\\n    phone: string | null;\\r\\n    tax_ids: any[];\\r\\n  };\\r\\n  customer_email: string | null;\\r\\n  discounts: any[];\\r\\n  expires_at: number;\\r\\n  invoice: string | null;\\r\\n  invoice_creation: {\\r\\n    enabled: boolean;\\r\\n    invoice_data: {\\r\\n      account_tax_ids: string[] | null;\\r\\n      custom_fields: any | null;\\r\\n      description: string | null;\\r\\n      footer: string | null;\\r\\n      issuer: any | null;\\r\\n      metadata: Record<string, any>;\\r\\n      rendering_options: any | null;\\r\\n    };\\r\\n  };\\r\\n  livemode: boolean;\\r\\n  locale: string | null;\\r\\n  metadata: {\\r\\n    [key: string]: string;\\r\\n  };\\r\\n  mode: string;\\r\\n  origin_context: any | null;\\r\\n  payment_intent: string | null;\\r\\n  payment_link: string | null;\\r\\n  payment_method_collection: string;\\r\\n  payment_method_configuration_details: {\\r\\n    id: string;\\r\\n    parent: string | null;\\r\\n  };\\r\\n  payment_method_options: {\\r\\n    card: {\\r\\n      request_three_d_secure: string;\\r\\n    };\\r\\n  };\\r\\n  payment_method_types: string[];\\r\\n  payment_status: string;\\r\\n  permissions: any | null;\\r\\n  phone_number_collection: {\\r\\n    enabled: boolean;\\r\\n  };\\r\\n  recovered_from: any | null;\\r\\n  saved_payment_method_options: {\\r\\n    allow_redisplay_filters: string[];\\r\\n    payment_method_remove: string;\\r\\n    payment_method_save: string | null;\\r\\n  };\\r\\n  setup_intent: string | null;\\r\\n  shipping_address_collection: any | null;\\r\\n  shipping_cost: any | null;\\r\\n  shipping_options: any[];\\r\\n  status: string;\\r\\n  submit_type: string | null;\\r\\n  subscription: string | null;\\r\\n  success_url: string;\\r\\n  total_details: {\\r\\n    amount_discount: number;\\r\\n    amount_shipping: number;\\r\\n    amount_tax: number;\\r\\n  };\\r\\n  ui_mode: string;\\r\\n  url: string | null;\\r\\n  wallet_options: any | null;\\r\\n}\\r\\n\\r\\nfunction isAbonnementActif(stripeSession: StripeSession | null): boolean {\\r\\n  if (!stripeSession) {\\r\\n    return false;\\r\\n  }\\r\\n  // Consider the session active if it reports status 'complete' or if it hasn't expired yet.\\r\\n  const now = Math.floor(Date.now() / 1000);\\r\\n  if (stripeSession.status === 'complete') {\\r\\n   if (typeof stripeSession.expires_at === 'number' && stripeSession.expires_at > now) {\\r\\n    return true;\\r\\n  }\\r\\n  }\\r\\n\\r\\n  return false;\\r\\n}\\r\\n\\r\\n\",\"import { BgAuthService } from '../bg-auth-service';\\r\\nimport { Component, Inject } from '@angular/core';\\r\\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\\r\\n\\r\\nimport { CommonModule } from '@angular/common';\\r\\nimport { FormsModule } from '@angular/forms';\\r\\n\\r\\n@Component({\\r\\n  selector: 'app-component-connexion-modale',\\r\\n  imports: [CommonModule, FormsModule],\\r\\n  templateUrl: './component-connexion-modale.html',\\r\\n  styleUrl: './component-connexion-modale.css',\\r\\n})\\r\\nexport class ComponentConnexionModale {\\r\\n  email = '';\\r\\n  password = '';\\r\\n\\r\\n  constructor(\\r\\n    public dialogRef: MatDialogRef<ComponentConnexionModale>,\\r\\n    public auth: BgAuthService,\\r\\n    @Inject(MAT_DIALOG_DATA) public data: any\\r\\n  ) {}\\r\\n\\r\\n  onLogin() {\\r\\n    console.log('A Tentative de connexion avec email :', this.email);\\r\\n    console.log('B Tentative de connexion avec auth :', this.auth);\\r\\n\\r\\n    this.auth.login(this.email, this.password).then(() => {\\r\\n      // Login réussi, on appelle Stripe\\r\\n      this.auth.createOrSearchStripeCustomer(this.email);\\r\\n      this.onClose();\\r\\n    })\\r\\n    .catch((err) => {\\r\\n      console.log('C Erreur Auth err:', err);\\r\\n      window.alert(err.message);\\r\\n    });\\r\\n    this.onClose();\\r\\n  }\\r\\n\\r\\n  onRegister() {\\r\\n    this.auth.register(this.email, this.password)\\r\\n    .then(()=>{\\r\\n      this.auth.createOrSearchStripeCustomer(this.email);\\r\\n      this.onClose();\\r\\n    })\\r\\n    .catch((err) => {\\r\\n      console.log('C Erreur Auth err:', err);\\r\\n      window.alert(err.message);\\r\\n    });\\r\\n    this.onClose();\\r\\n  }\\r\\n\\r\\n  onPasswordReset() {\\r\\n    console.log('A Tentative de reset password avec email :', this.email);\\r\\n    const obj: Promise<any> = this.auth\\r\\n      .sendPasswordResetEmail2(this.email)\\r\\n      .catch((err) => {\\r\\n        console.log('C Erreur Auth err:', err);\\r\\n        window.alert(err.message);\\r\\n      });\\r\\n    console.log('B Objet de reset password:', obj);\\r\\n    obj.then((res) => {\\r\\n      console.log('D Réponse de reset password: res', res);\\r\\n      console.log('E mail de reset password: ', this.email);\\r\\n      window.alert('Email de réinitialisation envoyé à ' + this.email);\\r\\n    });\\r\\n    this.onClose();\\r\\n  }\\r\\n\\r\\n  onNoClick(): void {\\r\\n    this.dialogRef.close();\\r\\n  }\\r\\n\\r\\n  onClose(): void {\\r\\n    this.dialogRef.close();\\r\\n  }\\r\\n\\r\\n  onLoginWithGoogle(): void {\\r\\n    this.auth.loginWithGoogle();\\r\\n    this.onClose();\\r\\n  }\\r\\n}\\r\\n\",\"\\r\\n<div style=\\\" margin: 20px;\\\">\\r\\n<form class=\\\"login-form\\\">\\r\\n  <div class=\\\"form-group\\\">\\r\\n    <input [(ngModel)]=\\\"email\\\" name=\\\"email\\\" placeholder=\\\"Email\\\" />\\r\\n  </div>\\r\\n  <div class=\\\"form-group\\\">\\r\\n    <input [(ngModel)]=\\\"password\\\" name=\\\"password\\\" type=\\\"password\\\" placeholder=\\\"Password\\\"/>\\r\\n  </div>\\r\\n  <div class=\\\"button-group\\\">\\r\\n    <button (click)=\\\"onLogin()\\\" type=\\\"submit\\\">Se connecter</button>\\r\\n    <button (click)=\\\"onPasswordReset()\\\" type=\\\"button\\\">Mot de passe oublié</button>\\r\\n\\r\\n  </div>\\r\\n  <div class=\\\"button-group\\\">\\r\\n    <button (click)=\\\"onLoginWithGoogle()\\\" type=\\\"submit\\\">Login with Google</button>\\r\\n  </div>\\r\\n  <div class=\\\"button-group\\\">\\r\\n\\r\\n    <button (click)=\\\"onRegister()\\\" type=\\\"submit\\\">Register</button>\\r\\n  </div>\\r\\n</form>\\r\\n\\r\\n<div style=\\\"text-align: right; margin-top: 20px;margin-right:5;\\\">\\r\\n  <button mat-button (click)=\\\"onClose()\\\">Fermer</button>\\r\\n</div>\\r\\n</div>\\r\\n\\r\\n\\r\\n\",\"import { Injectable } from '@angular/core';\\r\\n/**\\r\\n * Service providing backend function URLs and versioning.\\r\\n * Pour lancer l'emulateur local: >bg build && firebase emulators:start --only functions\\r\\n * Pour déployer les fonctions: > bg build && firebase deploy --only functions\\r\\n *\\r\\n */\\r\\n@Injectable({\\r\\n  providedIn: 'root'\\r\\n})\\r\\nexport class BgBackFunctions {\\r\\n\\r\\n  getUrlHost():string {\\r\\n    if ((window.location.hostname === '127.0.0.1') || (window.location.hostname === 'localhost')) {\\r\\n      return 'http://127.0.0.1:5001/job4you-78ed0/europe-west1';\\r\\n    }\\r\\n    return 'https://europe-west1-job4you-78ed0.cloudfunctions.net';\\r\\n  }\\r\\n\\r\\n\\r\\n  getVerion():string {\\r\\n    return '2';\\r\\n  }\\r\\n\\r\\n}\\r\\n\",\"import { ChangeDetectorRef, Component, Inject } from '@angular/core';\\r\\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\\r\\nimport { BgAuthService } from '../bg-auth-service';\\r\\nimport { CommonModule } from '@angular/common';\\r\\nimport { FormsModule } from '@angular/forms';\\r\\nimport { HttpClient } from '@angular/common/http';\\r\\nimport { BgBackFunctions } from '../bg-back-functions';\\r\\n\\r\\n@Component({\\r\\n  selector: 'app-component-connexion-modale',\\r\\n  imports: [CommonModule, FormsModule],\\r\\n  templateUrl: './component-settings-modale.html',\\r\\n  styleUrls: ['./component-settings-modale.css'],\\r\\n})\\r\\nexport class ComponentSettingsModale {\\r\\n  email = '';\\r\\n  stripeIdClient = 'No StripeIdClien';\\r\\n  stripeIdSession= 'No IdSession';\\r\\n\\r\\n  priceIdStripeOneTime = {\\r\\n    id: 'price_1SBWfpI256EUPY44i7gmazbu',\\r\\n    mode: 'payment',\\r\\n  };\\r\\n  priceIdStripeAbonnement = {\\r\\n    id: 'price_1SC2ZiI256EUPY44UFeNCj8x',\\r\\n    mode: 'subscription',\\r\\n  };\\r\\n\\r\\n\\r\\n  constructor(\\r\\n    public dialogRef: MatDialogRef<ComponentSettingsModale>,\\r\\n    public bgAuth: BgAuthService,\\r\\n    private http: HttpClient,\\r\\n    private changeDetectorRef: ChangeDetectorRef,\\r\\n    private bgBackFunctions: BgBackFunctions\\r\\n\\r\\n  ) {\\r\\n    console.log('ComponentSettingsModale constructor bgAuth :', this.bgAuth);\\r\\n\\r\\n  }\\r\\n\\r\\n  isAbonnementActif(){\\r\\n    return this.bgAuth.isUserAbonnementActif();\\r\\n  }\\r\\n\\r\\n  ngOnInit(): void {\\r\\n    this.email = this.bgAuth.currentUser()?.email || '';\\r\\n    this.stripeIdClient = this.bgAuth.stripeCustomer?.id || 'No StripeIdClient';\\r\\n    this.stripeIdSession = this.bgAuth.stripeSession?.id || 'No IdSession';\\r\\n    this.bgAuth.baseUrl0 = this.bgBackFunctions.getUrlHost();\\r\\n  }\\r\\n  onLogout() {\\r\\n    console.log('B Tentative de logout avec auth :', this.bgAuth) ;\\r\\n    this.bgAuth.logout();\\r\\n    this.onClose();\\r\\n  }\\r\\n\\r\\n  onNoClick(): void {\\r\\n    this.dialogRef.close();\\r\\n  }\\r\\n\\r\\n  onClose(): void {\\r\\n    this.dialogRef.close();\\r\\n  }\\r\\n\\r\\n  abonnement() {\\r\\n    console.log('abonnement request');\\r\\n    this.getStripePaymentLink();\\r\\n  }\\r\\n\\r\\n  getStripeCustomerId() {\\r\\n    return this.bgAuth.stripeCustomer?.id;\\r\\n  }\\r\\n\\r\\n  getStripePaymentLink() {\\r\\n    if (this.getStripeCustomerId()) {\\r\\n      this.getStripePaymentLink2();\\r\\n    } else {\\r\\n      console.log('Aucun client Stripe rencontré pour cet utilisateur.');\\r\\n      this.bgAuth.searchStripeCustomerOrCreate(this.getStripePaymentLink2.bind(this));\\r\\n    }\\r\\n  }\\r\\n  getStripePaymentLink2() {\\r\\n    const priceIdStripe = this.priceIdStripeAbonnement;\\r\\n    console.log('getStripePaymentLink pour le priceIdStripe :', priceIdStripe);\\r\\n    const currentHost = window.location.origin;\\r\\n\\r\\n    if (!priceIdStripe?.id || !priceIdStripe?.mode || !this.getStripeCustomerId()  || !this.bgAuth.getEmail()) {\\r\\n      console.error('Paramètre manquant pour Stripe ! email :', this.bgAuth.getEmail());\\r\\n      console.error('Paramètre manquant pour Stripe ! priceIdStripe :', priceIdStripe);\\r\\n      console.error('Paramètre manquant pour Stripe ! stripeCustomerId :',  this.getStripeCustomerId());\\r\\n    return;\\r\\n  }\\r\\n    const params = new URLSearchParams({\\r\\n      email: this.bgAuth.getEmail() ?? '',\\r\\n      priceIdStripe: priceIdStripe.id,\\r\\n      mode: priceIdStripe.mode,\\r\\n      clientIdStripe: this.getStripeCustomerId() ?? '',\\r\\n      succesUrl: `${currentHost}/merci`,\\r\\n      cancelUrl: `${currentHost}/cancelStripe`,\\r\\n    });\\r\\n    console.log('Appel de la fonction cloud bgstripegetpaymentlink avec :', params.toString());\\r\\n    const url0 = `${this.bgAuth.baseUrl0}/bgstripegetpaymentlink2?${params.toString()}`;\\r\\n    console.log('URL complète:', url0);\\r\\n    this.http.get<any>(url0, {}).subscribe({\\r\\n      next: (res) => {\\r\\n        console.log('Response from bgstripegetpaymentlink:', res);\\r\\n        const url = res.url;\\r\\n        console.log('url:', url);\\r\\n        // window.open(url, '_self');\\r\\n        if (url){\\r\\n          window.location.href = url;\\r\\n        }\\r\\n        else {\\r\\n          console.error('Pas de lien de paiement reçu de Stripe !');\\r\\n          if (res.error) {\\r\\n            const message = res.error.message;\\r\\n            console.error('Message d\\\\'erreur Stripe:', message);\\r\\n            console.error('Erreur Stripe:', res.error);\\r\\n          }\\r\\n        }\\r\\n\\r\\n      },\\r\\n      error: (err) => {\\r\\n        console.error('Erreur from bgstripegetpaymentlink:', err);\\r\\n      },\\r\\n    });\\r\\n  }\\r\\n\\r\\n\\r\\n  desabonnement() {\\r\\n    console.log('desabonnement request');\\r\\n     const stripeCustomerId = this.getStripeCustomerId();\\r\\n   if (!stripeCustomerId) {\\r\\n     console.log('Aucun client Stripe rencontré pour cet utilisateur.');\\r\\n     this.bgAuth.searchStripeCustomerOrCreate(this.resilierAbonnement2.bind(this));\\r\\n   } else {\\r\\n     this.resilierAbonnement2(stripeCustomerId);\\r\\n   }\\r\\n  }\\r\\n  resilierAbonnement2(stripeCustomerId: string) {\\r\\n    console.log('resilierAbonnement2 pour le stripeCustomerId :', stripeCustomerId);\\r\\n    this.http\\r\\n      .post<any>(\\r\\n        `${this.bgAuth.baseUrl0}/bgstripegetsession2`,\\r\\n        {\\r\\n        clientId: stripeCustomerId ,\\r\\n        urlRetour: window.location.origin + \\\"/moncomptebg\\\"\\r\\n      }\\r\\n      )\\r\\n      .subscribe({\\r\\n        next: (res) => {\\r\\n          console.log('Response from bgstripesubscriptionresilience2:', res);\\r\\n          const url = res.url;\\r\\n          console.log('url:', url);\\r\\n          if (url) {\\r\\n            window.location.href = url;\\r\\n          }\\r\\n        },\\r\\n        error: (err) => {\\r\\n          console.error('Erreur from bgstripesubscriptionresilience2:', err);\\r\\n        },\\r\\n      });\\r\\n  }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n}\\r\\n\",\"\\r\\n<div style=\\\" margin: 20px;\\\">\\r\\n<form class=\\\"login-form\\\">\\r\\n  <div class=\\\"form-group\\\">\\r\\n    {{ email }}\\r\\n  </div>\\r\\n<div class=\\\"form-group\\\">\\r\\n   Id Client: {{ stripeIdClient }}\\r\\n</div>\\r\\n\\r\\n<div class=\\\"form-group\\\">\\r\\n   Id Session: {{ stripeIdSession }}\\r\\n</div>\\r\\n\\r\\n  <div class=\\\"button-group\\\">\\r\\n    <button (click)=\\\"onLogout()\\\" type=\\\"submit\\\">Se deconnecter</button>\\r\\n  </div>\\r\\n\\r\\n<div *ngIf=\\\"isAbonnementActif(); else notAbonned\\\" style=\\\"border: 1px solid black;\\\">\\r\\n  <div class=\\\"button-group\\\">\\r\\n  <button (click)=\\\"desabonnement()\\\" type=\\\"submit\\\" >\\r\\n     Desabonnement\\r\\n  </button>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<ng-template #notAbonned>\\r\\n  <div class=\\\"button-group\\\">\\r\\n  <button (click)=\\\"abonnement()\\\" type=\\\"submit\\\">\\r\\n    Abonnement\\r\\n  </button>\\r\\n  </div>\\r\\n</ng-template>\\r\\n</form>\\r\\n\\r\\n<div style=\\\"text-align: right; margin-top: 20px;margin-right:5;\\\">\\r\\n  <button mat-button (click)=\\\"onClose()\\\">Fermer</button>\\r\\n</div>\\r\\n</div>\\r\\n\\r\\n\\r\\n\",\"import { Component } from '@angular/core';\\r\\nimport { BgAuthService } from './bg-auth-service';\\r\\nimport { MatDialog } from '@angular/material/dialog';\\r\\nimport { ComponentConnexionModale } from './component-connexion-modale/component-connexion-modale';\\r\\nimport { CommonModule } from '@angular/common';\\r\\nimport { ComponentSettingsModale } from './component-settings-modale/component-settings-modale';\\r\\n\\r\\n@Component({\\r\\n  selector: 'lib-bg-navigation-auth-stripe',\\r\\n  imports: [CommonModule],\\r\\n  templateUrl: `bg-navigation-auth-stripe.html`,\\r\\n  styles: ``,\\r\\n})\\r\\nexport class BgNavigationAuthStripe {\\r\\n  constructor(public auth: BgAuthService, private dialog: MatDialog) {}\\r\\n\\r\\n  onSettings() {\\r\\n    console.log('Ouverture des paramètres utilisateur');\\r\\n    this.dialog.open(ComponentSettingsModale, {\\r\\n      data: 'bbb',\\r\\n    });\\r\\n  }\\r\\n\\r\\n  onConnectionRequest() {\\r\\n    console.log('Tentative de connexion  :');\\r\\n\\r\\n    this.dialog.open(ComponentConnexionModale, {\\r\\n      data: 'aaa',\\r\\n    });\\r\\n  }\\r\\n\\r\\n\\r\\n}\\r\\n\",\"<span *ngIf=\\\"auth.currentUser() as user; else notConnected\\\" style=\\\"border: 1px solid black;\\\">\\r\\n  Connecté en tant que {{ user?.email }}\\r\\n  <button (click)=\\\"onSettings()\\\" class=\\\"nav-btn\\\">\\r\\n   <i class=\\\"fas fa-cog\\\"></i>\\r\\n</button>\\r\\n</span>\\r\\n\\r\\n<ng-template #notConnected>\\r\\n  <button (click)=\\\"onConnectionRequest()\\\" class=\\\"nav-btn primary\\\">\\r\\n    <i class=\\\"fa-regular fa-user\\\"></i> Connexion\\r\\n  </button>\\r\\n</ng-template>\\r\\n\",\"/*\\r\\n * Public API Surface of bg-navigation-auth-stripe\\r\\n */\\r\\n\\r\\nexport * from './lib/bg-navigation-auth-stripe';\\r\\nexport * from './lib/bg-auth-service';\\r\\nexport * from './lib/bg-back-functions';\\r\\n\",\"/**\\n * Generated bundle index. Do not edit.\\n */\\n\\nexport * from './public-api';\\n\"],\"names\":[\"i1\",\"i2.BgAuthService\",\"i3\",\"i4.BgBackFunctions\",\"i6\",\"i1.BgAuthService\",\"i2\"],\"mappings\":\"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\"}","type":"asset"}]}